
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="chapter-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="publisher-id">978-3-030-45234-6</journal-id><journal-id journal-id-type="doi">10.1007/978-3-030-45234-6</journal-id><journal-id journal-id-type="nlm-ta">Fundamental Approaches to Software Engineering</journal-id><journal-title-group><journal-title>Fundamental Approaches to Software Engineering</journal-title><journal-subtitle>23rd International Conference, FASE 2020, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020, Dublin, Ireland, April 25&#x02013;30, 2020, Proceedings</journal-subtitle></journal-title-group><isbn publication-format="print">978-3-030-45233-9</isbn><isbn publication-format="electronic">978-3-030-45234-6</isbn></journal-meta><article-meta><article-id pub-id-type="pmc">7418121</article-id><article-id pub-id-type="publisher-id">28</article-id><article-id pub-id-type="doi">10.1007/978-3-030-45234-6_28</article-id><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>TracerX: Dynamic Symbolic Execution with Interpolation (Competition Contribution)</article-title></title-group><contrib-group content-type="book editors"><contrib contrib-type="editor"><name><surname>Wehrheim</surname><given-names>Heike</given-names></name><address><email>wehrheim@upb.de</email></address><xref ref-type="aff" rid="Aff8">8</xref></contrib><contrib contrib-type="editor"><name><surname>Cabot</surname><given-names>Jordi</given-names></name><address><email>Jordi.cabot@icrea.cat</email></address><xref ref-type="aff" rid="Aff9">9</xref></contrib><aff id="Aff8"><label>8</label><institution-wrap><institution-id institution-id-type="GRID">grid.5659.f</institution-id><institution-id institution-id-type="ISNI">0000 0001 0940 2872</institution-id><institution>University of Paderborn, </institution></institution-wrap>Paderborn, Germany </aff><aff id="Aff9"><label>9</label><institution-wrap><institution-id institution-id-type="GRID">grid.36083.3e</institution-id><institution-id institution-id-type="ISNI">0000 0001 2171 6620</institution-id><institution>ICREA, </institution><institution>Open University of Catalonia, </institution></institution-wrap>Barcelona, Spain </aff></contrib-group><contrib-group><contrib contrib-type="author" corresp="yes"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-9988-6144</contrib-id><name><surname>Jaffar</surname><given-names>Joxan</given-names></name><address><email>joxan@comp.nus.edu.sg</email></address><xref ref-type="aff" rid="Aff10"/></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-8147-6590</contrib-id><name><surname>Maghareh</surname><given-names>Rasool</given-names></name><address><email>rasool@comp.nus.edu.sg</email></address><xref ref-type="aff" rid="Aff10"/></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-6169-6334</contrib-id><name><surname>Godboley</surname><given-names>Sangharatna</given-names></name><address><email>sanghara@comp.nus.edu.sg</email></address><xref ref-type="aff" rid="Aff10"/></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-1916-6812</contrib-id><name><surname>Ha</surname><given-names>Xuan-Linh</given-names></name><address><email>haxl@comp.nus.edu.sg</email></address><xref ref-type="aff" rid="Aff10"/></contrib><aff id="Aff10"><institution-wrap><institution-id institution-id-type="GRID">grid.4280.e</institution-id><institution-id institution-id-type="ISNI">0000 0001 2180 6431</institution-id><institution>National University of Singapore, </institution></institution-wrap>Singapore, Singapore </aff></contrib-group><pub-date pub-type="epub"><day>13</day><month>03</month><year>2020</year></pub-date><pub-date pub-type="pmc-release"><day>13</day><month>03</month><year>2020</year></pub-date><volume>12076</volume><fpage>530</fpage><lpage>534</lpage><permissions><copyright-statement>&#x000a9; The Author(s) 2020</copyright-statement><license license-type="OpenAccess"><license-p><bold>Open Access</bold> This chapter is licensed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license and indicate if changes were made.</license-p><license-p>The images or other third party material in this chapter are included in the chapter's Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the chapter's Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder.</license-p></license></permissions><abstract id="Abs1"><p id="Par1">Dynamic Symbolic Execution (DSE) is an important method for testing of programs. An important system on DSE is KLEE&#x000a0;[<xref ref-type="bibr" rid="CR1">1</xref>] which inputs a C/C++ program annotated with symbolic variables, compiles it into LLVM, and then emulates the execution paths of LLVM using a specified backtracking strategy. The major challenge in symbolic execution is <italic>path explosion</italic>. The method of <italic>abstraction learning</italic> [<xref ref-type="bibr" rid="CR7">7</xref>] has been used to address this. The key step here is the computation of an <italic>interpolant</italic> to represent the learned abstraction.</p><p id="Par2">TracerX, our tool, is built on top of KLEE and it implements and utilizes <italic>abstraction learning</italic>. The core feature in abstraction learning is <italic>subsumption</italic> of paths whose traversals are deemed to no longer be necessary due to similarity with already-traversed paths. Despite the overhead of computing interpolants, the <italic>pruning</italic> of the symbolic execution tree that interpolants provide often brings significant overall benefits. In particular, TracerX can <italic>fully</italic> explore many programs that would be impossible for any non-pruning system like KLEE to do so.</p></abstract><kwd-group xml:lang="en"><title>Keywords</title><kwd>Dynamic Symbolic Execution</kwd><kwd>Interpolation</kwd><kwd>Testing</kwd><kwd>Code Coverage</kwd></kwd-group><custom-meta-group><custom-meta><meta-name>issue-copyright-statement</meta-name><meta-value>&#x000a9; The Editor(s) (if applicable) and The Author(s) 2020</meta-value></custom-meta><custom-meta><meta-name>issue license</meta-name><meta-value><bold>Open Access</bold> This book is licensed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license and indicate if changes were made.
The images or other third party material in this book are included in the book's Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the book's Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder.</meta-value></custom-meta></custom-meta-group></article-meta></front><back><ref-list id="Bib1"><title>References</title><ref id="CR1"><label>1.</label><mixed-citation publication-type="other">Cadar, C., Dunbar, D., Engler, D.R., et&#x000a0;al.: KLEE: unassisted and automatic generation of high-coverage tests for complex systems programs. In: Proceedings of the 8th OSDI. pp. 209&#x02013;224 (2008)</mixed-citation></ref><ref id="CR2"><label>2.</label><mixed-citation publication-type="other">Chu, D.H., Jaffar, J.: A complete method for symmetry reduction in safety verification. In: 24th International Conference on Computer Aided Verification (CAV). pp. 616&#x02013;633, USA. Springer (2012)</mixed-citation></ref><ref id="CR3"><label>3.</label><mixed-citation publication-type="other">Chu, D.H., Jaffar, J., Maghareh, R.: Precise cache timing analysis via symbolic execution. In: 22nd IEEE Real-Time and Embedded Technology and Applications Symposium (RTAS). pp. 1&#x02013;12 (2016)</mixed-citation></ref><ref id="CR4"><label>4.</label><mixed-citation publication-type="other">Godefroid, P., Klarlund, N., Sen, K.: DART: Directed automated random testing. In: Proceedings of the 2005 ACM SIGPLAN conference on Programming language design and implementation (PLDI). pp. 213&#x02013;223 (2005)</mixed-citation></ref><ref id="CR5"><label>5.</label><mixed-citation publication-type="other">Jaffar, J., Murali, V., Navas, J.A.: Boosting concolic testing via interpolation. In: Proceedings of the 9th Conference on Foundations of Software Engineering (FSE). pp. 48&#x02013;58 (2013)</mixed-citation></ref><ref id="CR6"><label>6.</label><mixed-citation publication-type="other">Jaffar, J., Murali, V., Navas, J.A., Santosa, A.E.: TRACER: a symbolic execution tool for verification. In: 24th International Conference on Computer Aided Verification (CAV). pp. 758&#x02013;766. Springer (2012)</mixed-citation></ref><ref id="CR7"><label>7.</label><mixed-citation publication-type="other">Jaffar, J., Santosa, A.E., Voicu, R.: An interpolation method for CLP traversal. In: 15th International Conference on Principles and Practice of Constraint Programming (CP). pp. 454&#x02013;469. Springer (2009)</mixed-citation></ref><ref id="CR8"><label>8.</label><mixed-citation publication-type="other">McMillan, K.L.: Lazy annotation for program testing and verification. In: 22ndInternational Conference on Computer Aided Verification (CAV). pp. 104&#x02013;118 (2010)</mixed-citation></ref><ref id="CR9"><label>9.</label><mixed-citation publication-type="other">Mcmillan, K.L.: Lazy annotation revisited. In: 26th International Conference on Computer Aided Verification (CAV). pp. 243&#x02013;259 (2014)</mixed-citation></ref></ref-list></back></article>