

<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">J Appl Crystallogr</journal-id><journal-id journal-id-type="iso-abbrev">J Appl Crystallogr</journal-id><journal-id journal-id-type="publisher-id">J. Appl. Cryst.</journal-id><journal-title-group><journal-title>Journal of Applied Crystallography</journal-title></journal-title-group><issn pub-type="ppub">0021-8898</issn><issn pub-type="epub">1600-5767</issn><publisher><publisher-name>International Union of Crystallography</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">25844083</article-id><article-id pub-id-type="pmc">4379441</article-id><article-id pub-id-type="publisher-id">te5002</article-id><article-id pub-id-type="doi">10.1107/S1600576715001788</article-id><article-id pub-id-type="coden">JACGAR</article-id><article-id pub-id-type="pii">S1600576715001788</article-id><article-categories><subj-group subj-group-type="heading"><subject>Computer Programs</subject></subj-group></article-categories><title-group><article-title>
<italic>Nebula</italic>: reconstruction and visualization of scattering data in reciprocal space</article-title><alt-title><italic>Nebula</italic></alt-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Reiten</surname><given-names>Andreas</given-names></name><xref ref-type="aff" rid="a">a</xref><xref ref-type="corresp" rid="cor">*</xref></contrib><contrib contrib-type="author"><name><surname>Chernyshov</surname><given-names>Dmitry</given-names></name><xref ref-type="aff" rid="b">b</xref></contrib><contrib contrib-type="author"><name><surname>Mathiesen</surname><given-names>Ragnvald H.</given-names></name><xref ref-type="aff" rid="a">a</xref></contrib><aff id="a"><label>a</label>Department of Physics, Norwegian University of Science and Technology, Trondheim, <country>Norway</country></aff><aff id="b"><label>b</label>Swiss&#x02013;Norwegian Beamlines, European Synchrotron Radiation Facility, Grenoble, <country>France</country></aff></contrib-group><author-notes><corresp id="cor">Correspondence e-mail: <email>andreas.reiten@ntnu.no</email></corresp></author-notes><pub-date pub-type="collection"><day>01</day><month>4</month><year>2015</year></pub-date><pub-date pub-type="epub"><day>21</day><month>2</month><year>2015</year></pub-date><pub-date pub-type="pmc-release"><day>21</day><month>2</month><year>2015</year></pub-date><!-- PMC Release delay is 0 months and 0 days and was based on the
							<pub-date pub-type="epub"/>. --><volume>48</volume><issue>Pt 2</issue><issue-id pub-id-type="publisher-id">j150200</issue-id><fpage>604</fpage><lpage>607</lpage><history><date date-type="received"><day>23</day><month>11</month><year>2014</year></date><date date-type="accepted"><day>27</day><month>1</month><year>2015</year></date></history><permissions><copyright-statement>&#x000a9; Andreas Reiten et al. 2015</copyright-statement><copyright-year>2015</copyright-year><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0/uk/"><license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution Licence, which permits
unrestricted use, distribution, and reproduction in any medium, provided the original authors and source are cited.</license-p></license></permissions><self-uri xlink:type="simple" xlink:href="http://dx.doi.org/10.1107/S1600576715001788">A full version of this article is available from Crystallography Journals Online.</self-uri><abstract abstract-type="toc"><p>A software to reconstruct and visualize diffuse scattering in three-dimensional reciprocal space using data from X-ray area detectors is presented.</p></abstract><abstract><p>Two-dimensional solid-state X-ray detectors can now operate at considerable data throughput rates that allow full three-dimensional sampling of scattering data from extended volumes of reciprocal space within second to minute time&#x000ad;scales. For such experiments, simultaneous analysis and visualization allows for remeasurements and a more dynamic measurement strategy. A new software, <italic>Nebula</italic>, is presented. It efficiently reconstructs X-ray scattering data, generates three-dimensional reciprocal space data sets that can be visualized interactively, and aims to enable real-time processing in high-throughput measurements by employing parallel computing on commodity hardware.</p></abstract><kwd-group><kwd>diffuse scattering</kwd><kwd>data analysis and visualization</kwd><kwd>computer programs</kwd></kwd-group></article-meta></front><body><sec id="sec1"><label>1.</label><title>Terminology &#x000a0; </title><p>Texel, texture element or texture pixel: the fundamental unit of texture space used in computer graphics. Textures are represented by arrays of texels, just as pictures are represented by arrays of pixels.</p><p>Viewing frustum: in three-dimensional computer graphics, the region of space in the modeled world that may appear on the screen; it is the field of view of the notional camera.</p><p>Graphics processing unit (GPU): a specialized electronic circuit designed to rapidly manipulate and alter memory to accelerate the creation of images in a frame buffer intended for output to a display.</p><p>Memory bandwidth: the rate at which data can be read from or stored into a semiconductor memory by a processor.</p><p>OpenGL (Open Graphics Library): a cross-language multi-platform application programming interface for rendering two-dimensional and three-dimensional vector graphics (<ext-link ext-link-type="uri" xlink:href="http://opengl.org">http://opengl.org</ext-link>).</p><p>OpenCL (Open Computing Language): a framework for writing programs that execute across heterogeneous platforms consisting of central processing units, graphics processing units and other processors (<ext-link ext-link-type="uri" xlink:href="http://khronos.org/opencl">http://khronos.org/opencl</ext-link>).</p><p>Qt: a cross-platform application framework that is widely used for developing application software with a graphical user interface (<ext-link ext-link-type="uri" xlink:href="http://qt-project.org">http://qt-project.org</ext-link>).</p><p>Git: a distributed revision control and source code management system (<ext-link ext-link-type="uri" xlink:href="http://git-scm.com">http://git-scm.com</ext-link>).</p></sec><sec id="sec2"><label>2.</label><title>Introduction &#x000a0; </title><p>With the emergence of fast two-dimensional solid-state X-ray detectors (Kraft <italic>et al.</italic>, 2009<xref ref-type="bibr" rid="bb10"> &#x025b6;</xref>), full three-dimensional sampling of scattering data from extended volumes of reciprocal space may be carried out within second to minute timescales, provided that the X-ray source is adequately bright. This is particularly useful in experiments that seek to investigate the volumetric properties of features in reciprocal space, <italic>e.g.</italic> diffuse scattering, finite size effects, multiple twins or crystallites, <italic>etc</italic>. Faster data acquisition also opens up opportunities for novel studies where material response may be investigated <italic>in situ</italic> during external loading, with, for example, diffuse scattering as the response probe. For such three-dimensional scattering experiments, simultaneous analysis and visualization is a major advantage, allowing for remeasurements in the event of flaws and on-the-fly reassessment of measurement strategy.</p><p>There are currently a few programs available that specialize in visualizing three-dimensional volumes. <italic>Max3D</italic> (Britten &#x00026; Guan, 2007<xref ref-type="bibr" rid="bb3"> &#x025b6;</xref>; <ext-link ext-link-type="uri" xlink:href="http://www.chemistry.mcmaster.ca/facilities/xray/221-max3d">http://www.chemistry.mcmaster.ca/facilities/xray/221-max3d</ext-link>) resamples data onto a voxel grid and lets the user manually reload smaller diffraction volumes at higher resolution. <italic>Chimera</italic> (Pettersen <italic>et al.</italic>, 2004<xref ref-type="bibr" rid="bb12"> &#x025b6;</xref>) is an extensible program for interactive visualization and analysis of molecular structures and related data that can also be used for reciprocal space viewing. Like <italic>Max3D</italic> it uses voxel grids for volume viewing, but it is not concerned with data reconstruction. Falch <italic>et al.</italic> (2013<xref ref-type="bibr" rid="bb1"> &#x025b6;</xref>) describe a visualization method that distinguishes itself by operating directly on the unstructured samples, rather than resampling them to form voxels. They also employ an octree data structure to achieve faster rendering.</p><p>The software presented here works by resampling data to form a voxel octree and can be seen as a hybrid between the approaches taken in <italic>Max3D</italic> and by Falch <italic>et al.</italic> (2013<xref ref-type="bibr" rid="bb1"> &#x025b6;</xref>). The resampling combined with the octree structure help improve the rendering time and allow the data to span over large regions. The construction of the octree is also relatively fast, as heavy computations are done on the GPU where applicable. The aim of the program is rapid reconstruction and interactive visualization of three-dimensional data, meeting real-time processing requirements of high-throughput measurements.</p></sec><sec id="sec3"><label>3.</label><title>Program specification &#x000a0; </title><p>The software is divided into two major modules unified by a graphical user interface. The first module administers file selection and reconstruction, including generation of three-dimensional data sets. The second module handles volume rendering of the data sets and is equipped with a toolkit to help users view and analyze features. This section describes the workings of the two modules, and continues to specify features, performance, and the software and hardware environments.</p><sec id="sec3.1"><label>3.1.</label><title>Reconstruction &#x000a0; </title><p>The reconstruction procedure by which two-dimensional X-ray images are projected onto the Ewald sphere can be divided into three steps. First, the real-space position of each image pixel is calculated using the detector and diffractometer geometry found in the image headers. The program reads CBF files (Bernstein &#x00026; Hammersley, 2005<xref ref-type="bibr" rid="bb1"> &#x025b6;</xref>) and assumes a four-circle &#x003ba; diffractometer (Thorkildsen <italic>et al.</italic>, 1999<xref ref-type="bibr" rid="bb13"> &#x025b6;</xref>). Other geometries and file format interpreters can be implemented on demand. The pixel position relative to the sample dictates the direction of the scattered ray and allows the reciprocal space vector, <inline-formula><inline-graphic xlink:href="j-48-00604-efi1.jpg" mimetype="image" mime-subtype="gif"/></inline-formula>, to be expressed as <disp-formula id="fd1"><graphic xlink:href="j-48-00604-efd1.jpg" mimetype="image" mime-subtype="gif" position="float"/></disp-formula>where <inline-formula><inline-graphic xlink:href="j-48-00604-efi2.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> denotes the wavevector of the incident beam and <inline-formula><inline-graphic xlink:href="j-48-00604-efi3.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> is the wavevector of the scattered ray. <inline-formula><inline-graphic xlink:href="j-48-00604-efi4.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> under the kinematic approximation, where &#x003bb; is the wavelength.</p><p>Second, a set of corrections are applied to the intensity value of each image pixel. These include a Lorentz&#x02013;polarization correction, incident beam flux correction and background subtraction. The Lorentz correction is given by<disp-formula id="fd2"><graphic xlink:href="j-48-00604-efd2.jpg" mimetype="image" mime-subtype="gif" position="float"/></disp-formula>where <inline-formula><inline-graphic xlink:href="j-48-00604-efi5.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> is the velocity of a reciprocal node as it is rotated through and intersects with the Ewald sphere at angular speed &#x003c9;, as shown in Fig.&#x000a0;1<xref ref-type="fig" rid="fig1"> &#x025b6;</xref> (Buerger, 1940<xref ref-type="bibr" rid="bb4"> &#x025b6;</xref>). The velocity vector is defined by the sample rotation axis and <inline-formula><inline-graphic xlink:href="j-48-00604-efi1.jpg" mimetype="image" mime-subtype="gif"/></inline-formula>. The polarization correction is given by <disp-formula id="fd3"><graphic xlink:href="j-48-00604-efd3.jpg" mimetype="image" mime-subtype="gif" position="float"/></disp-formula>Here &#x003b8; is the Bragg angle, &#x003c8; is the angle between the diffracting plane and the plane of incidence, and<disp-formula id="fd4"><graphic xlink:href="j-48-00604-efd4.jpg" mimetype="image" mime-subtype="gif" position="float"/></disp-formula>where <inline-formula><inline-graphic xlink:href="j-48-00604-efi7.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> is the amplitude of the &#x003c3;-polarized field, <italic>i.e.</italic> the component oscillating in the plane of incidence, and <inline-formula><inline-graphic xlink:href="j-48-00604-efi8.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> is the amplitude of the component oscillating perpendicular to it (Kahn <italic>et al.</italic>, 1982<xref ref-type="bibr" rid="bb9"> &#x025b6;</xref>).</p><p>The background subtraction is approximated for each frame by a linear least-squares fit of a plane through a number of user-defined pixel regions that are deemed representative of the background. The regions can be selected for each frame individually or for a series of frames. The maximum intensity for each pixel position in a series can be found and visualized to help distinguish regions that remain background throughout the scan. Optionally, a uniform background value can be subtracted for simplicity. The latter method can be used to quickly yield a data set of manageable size suitable for a first inspection in three dimensions. A more rigorous and yet universally applicable background correction is currently beyond the scope of the software.</p><p>Third, data above zero intensity are put into an octree structure to facilitate interpolation. The data are then sampled over several overlapping voxel grids, each one with twice the resolution of the last, such that each voxel is repeatedly divided into eight new blocks until a desired resolution has been reached. Since only non-empty blocks of a grid are sampled further, the result is a sparse data structure called a sparse voxel octree (Crassin <italic>et al.</italic>, 2009<xref ref-type="bibr" rid="bb6"> &#x025b6;</xref>; Gobbetti <italic>et al.</italic>, 2008<xref ref-type="bibr" rid="bb8"> &#x025b6;</xref>) (<italic>cf</italic>. Fig. 3 below).</p></sec><sec id="sec3.2"><label>3.2.</label><title>Visualization &#x000a0; </title><p>The sparse data sets are visualized using volume ray casting (Levoy, 1988<xref ref-type="bibr" rid="bb11"> &#x025b6;</xref>; Drebin <italic>et al.</italic>, 1988<xref ref-type="bibr" rid="bb7"> &#x025b6;</xref>). In short, each texel on the screen used for rendering corresponds to a ray penetrating the volume containing the data set. The direction and extent of each ray is determined by a viewing frustum extending from a hypothetical camera point. The rays traverse the data and samples are taken along each ray in a front-to-back manner, with each intensity sample matched to an RGBA color value. The colors are blended together, and the texel takes the value of the accumulated color upon completing the ray traversal (<italic>cf</italic>. Figs. 2<xref ref-type="fig" rid="fig2"> &#x025b6;</xref> and 3<xref ref-type="fig" rid="fig3"> &#x025b6;</xref>). This mode of visualization is the default and is referred to as normal color blending.</p><p>The visualization greatly depends on the choice of transfer function, <italic>i.e.</italic> the RGBA specter to which intensity values are matched. For example, iso-surface extraction can be achieved by assigning nonzero opacity only to a select intensity range, while a transfer function where the alpha level gradually increases with intensity typically will yield partially transparent features.</p><p>There are in addition two more imaging modes to choose from. The integration mode replaces the normal color blending scheme by a method that integrates sample values along the ray and assigns color corresponding to the final value. This mode requires only minor configuration of the view parameters and is suited to give a first impression of the data. Finally, the slice mode can be used to visualize any cut through the data set. The different modes are shown in Fig. 3<xref ref-type="fig" rid="fig3"> &#x025b6;</xref>.</p></sec><sec id="sec3.3"><label>3.3.</label><title>Features &#x000a0; </title><p>The software has a graphical user interface and a set of basic features. The interface lets the user select files on the hard drive for processing and gives control over essential reconstruction and visualization parameters. A built-in image viewer can be used to inspect files one by one and to remove, for example, overexposed frames prior to reconstruction. The intensity in a series of frames can also be integrated in a specific area to quantitatively compare the relative intensities of features.</p><p>A unit-cell overlay can be specified based on a user-provided UB matrix (Busing &#x00026; Levy, 1967<xref ref-type="bibr" rid="bb5"> &#x025b6;</xref>) and rotated to coincide with the data. It is also possible to visualize custom three-dimensional functions where the input parameters can be changed interactively.</p></sec><sec id="sec3.4"><label>3.4.</label><title>Performance &#x000a0; </title><p>The bottleneck for three-dimensional visualization algorithms is computer processing power, which has increased rapidly with continued advances in lithography. Fully capable hardware can now be acquired off the shelf. Notably, this software benefits greatly from using a dedicated graphics processing unit &#x02013; a common component in most modern computers. This enables the use of OpenCL to parallelize tasks that would otherwise be considerable bottlenecks in the program work flow. In particular, parts of the reconstruction and volume rendering algorithms benefit greatly from parallelization. Consequently, the software requires an OpenCL capable graphics card with sufficient video memory to store data sets during rendering.</p><p>During reconstruction, the most time-consuming task is typically to read and decompress data from the hard drive. This step is mainly limited by the CPU and the read speed of the hard drive. Building the sparse voxel octree can be fast in comparison, depending on how much of the raw data set has been omitted, and is limited by CPU speed and graphics card memory bandwidth. Typical run times for the test systems given in Table 1<xref ref-type="table" rid="table1"> &#x025b6;</xref> are shown in Table 2<xref ref-type="table" rid="table2"> &#x025b6;</xref>.</p><p>From a programming standpoint the quality of the visualization is governed by the dimensions of the display texture. Its dimensions can be changed on demand, but in practice there is no gain from increasing it beyond the pixel dimensions it occupies on the screen. Reducing the texture resolution will result in a higher viewing frame rate, and using the test systems in Table 1<xref ref-type="table" rid="table1"> &#x025b6;</xref> this is often necessary for smooth real-time interaction. The frame rate is limited mainly by the graphics card memory bandwidth.</p></sec><sec id="sec3.5"><label>3.5.</label><title>Software and hardware environment &#x000a0; </title><p>The program is written in C++ and uses OpenGL and OpenCL for rendering and parallelized computations, respectively. The graphical user interface is provided by Qt 5. The software has been tested under 64&#x02005;bit Arch Linux and 64&#x02005;bit Windows 7, with the hardware specifications as shown in Table 1<xref ref-type="table" rid="table1"> &#x025b6;</xref>. The minimum hardware requirement is an OpenCL 1.1 and OpenGL 4.0 capable graphics card and 2&#x02005;GB of system RAM. The maximum data set size is limited by the available system RAM, the graphics card RAM and the system hard drive space, but there are no fixed lower bounds on the latter two.</p></sec><sec id="sec3.6"><label>3.6.</label><title>Availability and documentation &#x000a0; </title><p>The source code is available under the GNU General Public License at <ext-link ext-link-type="uri" xlink:href="https://github.com/Natnux/nebula">https://github.com/Natnux/nebula</ext-link>. Documentation for users exists in the wiki on the same page. Anyone is invited to browse the source code, and code contributions through Git are greatly appreciated.</p></sec></sec></body><back><ack><p>Thanks are extended to Dag Breiby (Department of Physics, NTNU), Jostein Fl&#x000f8;ystad (SINTEF Energy Research) and Thomas Falck (Department of Computer and Information Science, NTNU) for inspiration in the early phase of development, and to Thomas Tybell (Department of Electronics and Telecommunications, NTNU) for providing the sample used to collect the data presented in Fig. 3<xref ref-type="fig" rid="fig3"> &#x025b6;</xref>.</p></ack><ref-list><title>References</title><ref id="bb1"><mixed-citation publication-type="other">Bernstein, H. &#x00026; Hammersley, A. (2005). <italic>International Tables for Crystallography</italic>, Vol. G, <italic>Definition and Exchange of Crystallographic Data</italic>, edited by S. R. Hall &#x00026; B. McMahon, pp. 37&#x02013;43. Heidelberg: Springer.</mixed-citation></ref><ref id="bb2"><mixed-citation publication-type="other">Boschker, J., Monsen, &#x000c5;., Nord, M., Mathieu, R., Grepstad, J., Holmestad, R., Wahlstr&#x000f6;m, E. &#x00026; Tybell, T. (2013). <italic>Philos. Mag.</italic>
<bold>93</bold>, 1549&#x02013;1562.</mixed-citation></ref><ref id="bb3"><mixed-citation publication-type="other">Britten, J. &#x00026; Guan, W. (2007). <italic>IUCr Commission on Crystallographic Computing Newsletter</italic>, No. 8, pp. 96&#x02013;108.</mixed-citation></ref><ref id="bb4"><mixed-citation publication-type="other">Buerger, M. (1940). <italic>Proc. Natl Acad. Sci. USA</italic>, <bold>26</bold>, 637&#x02013;642. </mixed-citation></ref><ref id="bb5"><mixed-citation publication-type="other">Busing, W. R. &#x00026; Levy, H. A. (1967). <italic>Acta Cryst.</italic>
<bold>22</bold>, 457&#x02013;464.</mixed-citation></ref><ref id="bb6"><mixed-citation publication-type="other">Crassin, C., Neyret, F., Lefebvre, S. &#x00026; Eisemann, E. (2009). <italic>Proceedings of the 2009 Symposium on Interactive 3D Graphics and Games, I3D &#x02019;09</italic>, pp. 15&#x02013;22. New York: ACM.</mixed-citation></ref><ref id="bb7"><mixed-citation publication-type="other">Drebin, R. A., Carpenter, L. &#x00026; Hanrahan, P. (1988). <italic>ACM SIGGRAPH Comput. Graph.</italic>
<bold>22</bold>(4), 65&#x02013;74.</mixed-citation></ref><ref id="bb8"><mixed-citation publication-type="other">Gobbetti, E., Marton, F. &#x00026; Iglesias Guiti&#x000e1;n, J. A. (2008). <italic>Vis. Comput.</italic>
<bold>24</bold>, 797&#x02013;806.</mixed-citation></ref><ref id="bb9"><mixed-citation publication-type="other">Kahn, R., Fourme, R., Gadet, A., Janin, J., Dumas, C. &#x00026; Andr&#x000e9;, D. (1982). <italic>J. Appl. Cryst.</italic>
<bold>15</bold>, 330&#x02013;337.</mixed-citation></ref><ref id="bb10"><mixed-citation publication-type="other">Kraft, P., Bergamaschi, A., Broennimann, Ch., Dinapoli, R., Eikenberry, E., Henrich, B., Johnson, I., Mozzanica, A., Schlep&#x000fc;tz, C., Willmott, P. &#x00026; Schmitt, B. (2009). <italic>J. Synchrotron Rad.</italic>
<bold>16</bold>, 368&#x02013;375.</mixed-citation></ref><ref id="bb11"><mixed-citation publication-type="other">Levoy, M. (1988). <italic>IEEE Comput. Graph. Appl.</italic>
<bold>8</bold>, 29&#x02013;37.</mixed-citation></ref><ref id="bb12"><mixed-citation publication-type="other">Pettersen, E. F., Goddard, T. D., Huang, C. C., Couch, G. S., Greenblatt, D. M., Meng, E. C. &#x00026; Ferrin, T. E. (2004). <italic>J. Comput. Chem.</italic>
<bold>25</bold>, 1605&#x02013;1612.</mixed-citation></ref><ref id="bb13"><mixed-citation publication-type="other">Thorkildsen, G., Mathiesen, R. H. &#x00026; Larsen, H. B. (1999). <italic>J. Appl. Cryst.</italic>
<bold>32</bold>, 943&#x02013;950.</mixed-citation></ref></ref-list></back><floats-group><fig id="fig1" position="float"><label>Figure 1</label><caption><p>The Lorentz correction is governed by the orientation of the sample rotation axis, given by the angular velocity vector <inline-formula><inline-graphic xlink:href="j-48-00604-efi9.jpg" mimetype="image" mime-subtype="gif"/></inline-formula>, with respect to the scattering vector <inline-formula><inline-graphic xlink:href="j-48-00604-efi1.jpg" mimetype="image" mime-subtype="gif"/></inline-formula>. The point P represents a reciprocal lattice node in the instant it rotates through and intersects with the Ewald sphere. Specifically, the correction is proportional to the velocity vector <inline-formula><inline-graphic xlink:href="j-48-00604-efi5.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> of the point P projected onto the unit wavevector <inline-formula><inline-graphic xlink:href="j-48-00604-efi12.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> of the scattered ray.</p></caption><graphic xlink:href="j-48-00604-fig1"/></fig><fig id="fig2" position="float"><label>Figure 2</label><caption><p>Volume ray casting is a rendering technique in which rays traverse and sample a volume. Here the view plane is depicted from above.</p></caption><graphic xlink:href="j-48-00604-fig2"/></fig><fig id="fig3" position="float"><label>Figure 3</label><caption><p>Example reconstruction based on data from an La<inline-formula><inline-graphic xlink:href="j-48-00604-efi13.jpg" mimetype="image" mime-subtype="gif"/></inline-formula>Sr<inline-formula><inline-graphic xlink:href="j-48-00604-efi14.jpg" mimetype="image" mime-subtype="gif"/></inline-formula>MnO<inline-formula><inline-graphic xlink:href="j-48-00604-efi15.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> thin film grown along <inline-formula><inline-graphic xlink:href="j-48-00604-efi16.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> on an SrTiO<inline-formula><inline-graphic xlink:href="j-48-00604-efi15.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> substrate. The diffuse scattering around the <inline-formula><inline-graphic xlink:href="j-48-00604-efi18.jpg" mimetype="image" mime-subtype="gif"/></inline-formula> Bragg peak is shown in (<italic>a</italic>) normal color blending, (<italic>b</italic>) integration and (<italic>c</italic>) slice mode. The lower peaks originate from the substrate and the upper features from the thin film. The two blobs left and right of the thin-film peak can be attributed to the two major domain configurations. The positions of the features are in agreement with previous findings (Boschker <italic>et al.</italic>, 2013<xref ref-type="bibr" rid="bb2"> &#x025b6;</xref>). Thickness fringes are easily recognized. (<italic>d</italic>) A zoomed out view of the data set, showing diffuse features superimposed on the corresponding cubic lattice. (<italic>e</italic>) Same as (<italic>d</italic>), but showing the sparse voxel octree structure.</p></caption><graphic xlink:href="j-48-00604-fig3"/></fig><table-wrap id="table1" position="float"><label>Table 1</label><caption><title>Specification of test systems</title></caption><table frame="hsides" rules="groups"><thead valign="top"><tr><th style="border-bottom:1px solid black;" rowspan="1" colspan="1" valign="top">&#x000a0;</th><th style="border-bottom:1px solid black;" rowspan="1" colspan="1" valign="top">Laptop</th><th style="border-bottom:1px solid black;" rowspan="1" colspan="1" valign="top">Desktop</th></tr></thead><tbody valign="top"><tr><td rowspan="1" colspan="1" valign="top">RAM</td><td rowspan="1" colspan="1" valign="top">16 GB @ 1333MHz</td><td rowspan="1" colspan="1" valign="top">16 GB @ 2400MHz</td></tr><tr><td rowspan="1" colspan="1" valign="top">CPU</td><td rowspan="1" colspan="1" valign="top">Intel Core i7-2630QM @ 2.0GHz</td><td rowspan="1" colspan="1" valign="top">Intel Core i7-4790 @ 3.6GHz</td></tr><tr><td rowspan="1" colspan="1" valign="top">Graphics card </td><td rowspan="1" colspan="1" valign="top">Nvidia GT 560M @ 60.0GBs<sup>1</sup>
</td><td rowspan="1" colspan="1" valign="top">Nvidia GTX 760 @ 192.3GBs<sup>1</sup>
</td></tr></tbody></table></table-wrap><table-wrap id="table2" position="float"><label>Table 2</label><caption><title>Example run times processing the 1726 frames (4.3GB compressed data) that constitute Fig. 3<xref ref-type="fig" rid="fig3"> &#x025b6;</xref>
</title><p>The sparse voxel octree that was generated was 13 levels deep.</p></caption><table frame="hsides" rules="groups"><thead valign="top"><tr><th style="border-bottom:1px solid black;" rowspan="1" colspan="1" align="left" charoff="50" valign="bottom">System</th><th style="border-bottom:1px solid black;" rowspan="1" colspan="1" align="left" charoff="50" valign="bottom">Reading and reducing data (s)</th><th style="border-bottom:1px solid black;" rowspan="1" colspan="1" align="left" charoff="50" valign="bottom">Octree generation (s) </th></tr></thead><tbody valign="top"><tr><td rowspan="1" colspan="1" align="left" valign="top">Laptop, Arch Linux</td><td rowspan="1" colspan="1" align="left" valign="top">172</td><td rowspan="1" colspan="1" align="left" valign="top">26 </td></tr><tr><td rowspan="1" colspan="1" align="left" valign="top">Laptop, Windows 7</td><td rowspan="1" colspan="1" align="left" valign="top">211</td><td rowspan="1" colspan="1" align="left" valign="top">85 </td></tr><tr><td rowspan="1" colspan="1" align="left" valign="top">Desktop, Arch Linux</td><td rowspan="1" colspan="1" align="left" valign="top">117</td><td rowspan="1" colspan="1" align="left" valign="top">24 </td></tr><tr><td rowspan="1" colspan="1" align="left" valign="top">Desktop, Windows 7</td><td rowspan="1" colspan="1" align="left" valign="top">127</td><td rowspan="1" colspan="1" align="left" valign="top">32 </td></tr></tbody></table></table-wrap></floats-group></article>