
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">Biomed Res Int</journal-id><journal-id journal-id-type="iso-abbrev">Biomed Res Int</journal-id><journal-id journal-id-type="publisher-id">BMRI</journal-id><journal-title-group><journal-title>BioMed Research International</journal-title></journal-title-group><issn pub-type="ppub">2314-6133</issn><issn pub-type="epub">2314-6141</issn><publisher><publisher-name>Hindawi Publishing Corporation</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">25050327</article-id><article-id pub-id-type="pmc">4090576</article-id><article-id pub-id-type="doi">10.1155/2014/207041</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group></article-categories><title-group><article-title>On Designing Multicore-Aware Simulators for Systems Biology Endowed with OnLine Statistics</article-title></title-group><contrib-group><contrib contrib-type="author"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0001-8788-0829</contrib-id><name><surname>Aldinucci</surname><given-names>Marco</given-names></name><xref ref-type="aff" rid="I1">
<sup>1</sup>
</xref></contrib><contrib contrib-type="author"><name><surname>Calcagno</surname><given-names>Cristina</given-names></name><xref ref-type="aff" rid="I1">
<sup>1</sup>
</xref><xref ref-type="aff" rid="I2">
<sup>2</sup>
</xref></contrib><contrib contrib-type="author"><name><surname>Coppo</surname><given-names>Mario</given-names></name><xref ref-type="aff" rid="I1">
<sup>1</sup>
</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0001-8109-1706</contrib-id><name><surname>Damiani</surname><given-names>Ferruccio</given-names></name><xref ref-type="aff" rid="I1">
<sup>1</sup>
</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0001-6500-7607</contrib-id><name><surname>Drocco</surname><given-names>Maurizio</given-names></name><xref ref-type="aff" rid="I1">
<sup>1</sup>
</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-5574-2787</contrib-id><name><surname>Sciacca</surname><given-names>Eva</given-names></name><xref ref-type="aff" rid="I1">
<sup>1</sup>
</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-1541-0083</contrib-id><name><surname>Spinella</surname><given-names>Salvatore</given-names></name><xref ref-type="aff" rid="I1">
<sup>1</sup>
</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0001-6323-3459</contrib-id><name><surname>Torquati</surname><given-names>Massimo</given-names></name><xref ref-type="aff" rid="I3">
<sup>3</sup>
</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid" authenticated="false">http://orcid.org/0000-0002-0049-4237</contrib-id><name><surname>Troina</surname><given-names>Angelo</given-names></name><xref ref-type="aff" rid="I1">
<sup>1</sup>
</xref><xref ref-type="corresp" rid="cor1">*</xref></contrib></contrib-group><aff id="I1"><sup>1</sup>Department of Computer Science, University of Torino, 10149 Torino, Italy</aff><aff id="I2"><sup>2</sup>Department of Life Sciences and Systems Biology, University of Torino, 10123 Torino, Italy</aff><aff id="I3"><sup>3</sup>Department of Computer Science, University of Pisa, 56127 Pisa, Italy</aff><author-notes><corresp id="cor1">*Angelo Troina: <email>troina@di.unito.it</email></corresp><fn fn-type="other"><p>Academic Editor: Horacio P&#x000e9;rez-S&#x000e1;nchez</p></fn></author-notes><pub-date pub-type="ppub"><year>2014</year></pub-date><pub-date pub-type="epub"><day>22</day><month>6</month><year>2014</year></pub-date><volume>2014</volume><elocation-id>207041</elocation-id><history><date date-type="received"><day>19</day><month>2</month><year>2014</year></date><date date-type="rev-recd"><day>16</day><month>5</month><year>2014</year></date><date date-type="accepted"><day>18</day><month>5</month><year>2014</year></date></history><permissions><copyright-statement>Copyright &#x000a9; 2014 Marco Aldinucci et al.</copyright-statement><copyright-year>2014</copyright-year><license xlink:href="https://creativecommons.org/licenses/by/3.0/"><license-p>This is an open access article distributed under the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p></license></permissions><abstract><p>The paper arguments are on enabling methodologies for the design of a fully parallel, online, interactive tool aiming to support the bioinformatics scientists .In particular, the features of these methodologies, supported by the FastFlow parallel programming framework, are shown on a simulation tool to perform the modeling, the tuning, and the sensitivity analysis of stochastic biological models. A stochastic simulation needs thousands of independent simulation trajectories turning into big data that should be analysed by statistic and data mining tools. In the considered approach the two stages are pipelined in such a way that the simulation stage streams out the partial results of all simulation trajectories to the analysis stage that immediately produces a partial result. The simulation-analysis workflow is validated for performance and effectiveness of the online analysis in capturing biological systems behavior on a multicore platform and representative proof-of-concept biological systems. The exploited methodologies include pattern-based parallel programming and data streaming that provide key features to the software designers such as performance portability and efficient in-memory (big) data management and movement. Two paradigmatic classes of biological systems exhibiting multistable and oscillatory behavior are used as a testbed.</p></abstract></article-meta></front><body><sec id="sec1"><title>1. Introduction</title><p>This paper presents a critical rethinking of the parallelization of biological computational tools in the light of multicore platforms, which nowadays equip all scientific laboratories.</p><p>We will focus on the features that are required to derive an efficient simulator of stochastic processes considering, in particular, performance and easy engineering. This latter aspect will be of crucial importance for next generation of biological tools that will be largely designed by bioinformatics scientists, who are likely to be more interested in the accurate modeling of natural phenomena rather than on the synchronisation protocols required to build efficient tools on multicore platforms.</p><p>The stochastic simulation of biological systems is an increasingly popular technique in bioinformatics as either an alternative or a complementary tool to ordinary differential equations (ODEs). This trend, starting from Gillespie's seminal work [<xref rid="B29" ref-type="bibr">1</xref>], has been supported by a growing number of formalisms aiming to describe stochastic models of biological systems [<xref rid="B9" ref-type="bibr">2</xref>&#x02013;<xref rid="B18" ref-type="bibr">7</xref>].</p><p>The stochastic modeling approach is computationally much more expensive than ODEs. Nevertheless, this approach is quite attractive for its superior ability to describe transient and multistable behaviors of biological systems. In particular it allows studying rare or divergent behaviors, spikes, and discriminate families of possible behaviors that are typically hidden in the averaged behavior described by ODEs.</p><p>The high computational cost of stochastic simulation can also be very annoying in the tuning of biochemical models in which some quantitative parameters are unknown or scarcely known and need a set of tests to be fixed.</p><p>This has led, in the last two decades, to a number of attempts to accelerate them up using several kind of techniques, such as approximate simulation algorithms and parallel computing [<xref rid="B28" ref-type="bibr">8</xref>, <xref rid="B40" ref-type="bibr">9</xref>]. In this work, this latter approach is taken into account.</p><p>Since stochastic simulations rely on Monte Carlo method, many independent simulation instances should be computed and analysed to achieve statistically meaningful results. The computation of these independent instances has been traditionally exploited in an<italic> embarrassingly parallel</italic> fashion, executing a partition of the instances on different machines. This approach naturally couples with the distributed execution of a batch of tasks that require large infrastructures (e.g., grids and clouds) and suffers from slow time-to-solution as each experiment requires to enqueue the simulations in shared environment, deploy initial data, simulate the model, gather results from a distributed environment, postprocess them (often sequentially), then eventually access results. This process is typically repeated several times to fine tune the initial conditions and simulation parameters.</p><p>This approach, when transferred on multicore platform, which nowadays equips the large majority of computing platforms, fails shortly to produce actual application speedup, especially for I/O and memory-bound applications, since all the cores usually share the same memory and I/O subsystem. Indeed, the simulation of biological systems produces a large amount of data, which can be regarded as streams of data resulting from the on-going simulations. The management of these streams is not trivial on multicore platforms, as the memory bandwidth cannot usually sustain a continuous flux of data coming from all the cores at the same time. A related aspect concerns the filtering and the analysis of raw results, which require the merging of data obtained from different simulation instances, and possibly their statistical description or mining, with data reduction techniques. Even in a distributed computing environment this phase is often demoted to a secondary aspect in the computation and treated with offline postprocessing tools, frequently not even disclosed in performance results.</p><p>This approach is no longer practical, especially on multicore platforms, because of a number of reasons:<list list-type="roman-lower"><list-item><p>the ever-increasing size of produced data burdens on the main weaknesses of multicore platforms, that is memory bandwidth and core synchronisations;</p></list-item><list-item><p>the &#x0201c;sequentialisation&#x0201d; of simulation and analysis phases slow down the design-to-result process, which is particularly annoying during the tuning of the biological model, especially in the cases where the simulation outcome could show very soon an incorrect behavior;</p></list-item><list-item><p>the design of the simulator is often specifically optimised for a specific parallel platform, either multicore or distributed (or not optimised at all).</p></list-item></list>
</p><p>Since the frequency and size of data moved across simulation workflows strictly depend on the required accuracy, the simulation and analysis of biological systems at high-precision happen to be a serious issue on modern shared-memory multicore platforms. Indeed it involves the merging of results from different simulation instances and possibly their statistical description or mining with data reduction techniques.</p><p>The design of simulation-analysis workflow encompassing a parallel simulator stage and a parallel data analysis stage is presented along with its experimental validation. The two stages are pipelined in such a way that, at each observed simulation time <italic>t</italic>
<sub><italic>i</italic></sub>, the simulation stage stream out the partial results of all simulation trajectories (aligned at <italic>t</italic>
<sub><italic>i</italic></sub>) to the analysis stage that immediately produces a partial result. Analysis stage, which can be equipped with user-defined statistic and mining operators, works on sliding data window and does not require keeping in memory the full data set with both performance and response time benefits.</p><p>The advocated design methodology is validated on interesting classes of biological problems, for which the classical modelization via ODE is quite problematic, if not impossible, while a stochastic model can be more proficuous. As we shall see, despite the whole simulation-analysis being performed on partial data, that is, on temporal sliding window of simulation results, the dynamics of the system is effectively approximated and can be shown to bioinformatics scientist during a simulation.</p><p>The technical challenges for the parallelisation of simulation and analysis stages and their pipelining are discussed (among these, the exploitation of high-level pattern-based parallel programming approaches to decrease design and implementation time). Eventually the proposed approach can be used as a fully reusable methodology that can be exploited in the design or parallelisation of other tools for systems biology.</p><p>The evaluation of the integrated approach will be focused on the efficiency and speedup of the tool in executing the simulation and online analysis workflow on multicore platforms. In this respect, paradigmatic examples of two challenging classes of biological systems, that is, bistable/multistable, and oscillatory systems, are discussed. The key behavior of these systems are represented by way of different classes of online analysis tools introduced in the previous section, respectively, statistical description, clustering, and frequency detection.</p><p>To perform these experiments, a simulator for the calculus of wrapped compartments (CWC), built with the above technology, will be used as test-bed. CWC [<xref rid="B24" ref-type="bibr">10</xref>] is a recently proposed formalism for the representation of biological systems. CWC extends the known stochastic simulators by adding a nested structure of labeled compartments delimited by membranes. However, to better focus on the proposed methodology and make the paper self-contained, we will write all examples of the paper in the basic subset of CWC in which biochemical reactions are denoted in a standard chemical notation. We only remark that a distinguished feature of CWC, which will be used in this paper, is the possibility of associating each reaction with an arbitrary rate function depending on the overall content of the ambient in which the reaction takes place. This allows to tailor the reaction rates on the specific characteristics of the system, as for instance when representing nonlinear reactions as Michaelis-Menten kinetics.</p></sec><sec id="sec2"><title>2. Methods</title><p>The methods for the stochastic simulation of biological systems, including Gillespie's algorithm [<xref rid="B29" ref-type="bibr">1</xref>], are typically based on the Monte Carlo method. An individual simulation, which tracks the state of the system at each time-step, is called<italic> trajectory</italic>. Many thousands of independent trajectories might be needed to get a representative picture of how the system behaves on the whole. This behavior springs from the collective analysis of trajectories, which is typically carried out by way of statistical or data mining estimators.</p><p>Thanks to their independence, the different instances needed to simulate a biological model that can be easily computed in an<italic> embarrassingly parallel</italic> fashion. However, the complete simulation workflow needed to derive simulation result including additional phases, such as the dispatching and scheduling of simulations, result gathering, trajectory data assembling, and analysis phases, which exhibit data dependencies (thus requires communications and/or synchronisations). Often, to simplify the design of the simulation tool, these phases are neither parallelized nor considered in the performance evaluation. As a matter of a fact, a parallel simulation is often considered an &#x0201c;embarrassingly parallel&#x0201d; problem, whereas it is if data distribution, gathering, filtering, and analysis are not considered as part of the whole simulation workflow. These phases, often (questionably) considered as preprocessing and postprocessing phases, may result to be as expensive as the simulation itself. Moreover, the full sequentialization of the phases inhibits the early detection of badly tuned simulations and makes the model tuning spiral annoyingly slow.</p><p>As an example, a simulation of the HIV diffusion problem (computed using the StochKit toolkit for 4 years of simulation time) may easily produce over 5&#x02009;GBytes of raw data per instance [<xref rid="B3" ref-type="bibr">11</xref>]. As clear, the data size is <italic>n</italic>-folded when <italic>n</italic> instances are considered. Eventually, this data should be gathered and often reduced to a single trajectory via statistical methods or analysed with data mining methods, that can be much more time expensive to be figured out than bare statistical estimators.</p><p>These potential performance flaws are further exacerbated in multicore and many-core platforms. These platforms do not exhibit the same degree of replication of hardware resources that can be found in distributed environments and even independent processes actually compete for the same hardware resources within the single platform, such as main and secondary memory, the performances of which represent the real challenge of the forthcoming parallel programming models (a.k.a.<italic> memory wall</italic> problem). While simulation is substantially a CPU-bound problem on distributed platform, it may become prevalently an I/O-bound problem on a multicore platform due to the need to store and postprocess many trajectories. The finer the observed simulation time-step the strongest the computational problem is characterized as I/O-bound.</p><p>To be effective, stochastic methods in systems biology require many trajectories with a fine grain resolution in order to make observable deviant trajectories, peaks, high variance of results and multistable behaviors, which often represent the real nature of the phenomena that is not well captured by traditional approaches, such as ODEs. These events are often not immediate to detect in the bulk of gross simulation results. Several techniques for analyzing such data, for example, principal components analysis, linear modeling, and canonical correlation analysis have been proposed. It can be imagined that next generation software tools for natural sciences should be able to perform this kind of processing in pipeline with the running data source, as a partially or totally online process because:<list list-type="roman-lower"><list-item><p>it will be needed to manage an ever-increasing amount of experimental data, either coming from measurement or simulation, and</p></list-item><list-item><p>it will substantially improve the overall experimental workflow by providing the natural scientists with an almost real-time feedback, enabling the early tuning or sweeping of the experimental parameters and,thus, scientific productivity.</p></list-item></list>
</p><p>The flexibility given by the possibility of running many different analysis modules in parallel is of particular interest, as in many biological case studies the searched pattern in experimental results is unknown and might require to try different kinds of analysis since modules can be swept in parallel.</p><p>The parallel analysis of the system dynamics (e.g., along time) is more challenging since online data processing requires statistic and data mining operators to work on streamed data and, in general, random access to data is guaranteed only within a limited window of the whole dataset, while already accessed data can be only stored in synthesized form. When data description techniques, requiring to access the whole data set in random order, cannot be used, online data description and mining requires novel algorithms. The extensive study of these algorithms is an emerging topic in data discovery community and is beyond the scope of this work.</p><p>We advocate the parallelization of both simulations and analysis by pipelining them in a two-stage workflow, where both stages are also parallel. We also advocate the high-level design of the whole workflow to enhance both productivity and efficiency on different platforms (i.e., performance portability).</p><sec id="sec2.1"><title>2.1. A Parallel Simulation-Analysis Workflow for CWC</title><p>The intrinsic complexity in the parallelization of the single step has traditionally led to the exploitation of parallelism in the computation of independent instances of the same simulation, which should anyway be computed to achieve statistical convergence of simulated trajectories (as in all Monte Carlo methods). The problem is well understood; it has been exploited in the last two decades in many different flavors and distributed computing environments, from clusters to grid to clouds [<xref rid="B28" ref-type="bibr">8</xref>, <xref rid="B3" ref-type="bibr">11</xref>&#x02013;<xref rid="B12" ref-type="bibr">16</xref>]. Notwithstanding that the problem has been often approached either neglecting to consider the cost of analysis or assuming that output data has a negligible size; this is not likely to happen in this and next generations biological simulations.</p><p>The previous considerations have led to the design of a simulation tool that includes both parallel simulation and data analysis in a single workflow. These phases are pipelined rather than sequential. To make it possible, it is needed that all the logical phases of the process (i.e., data distribution, parallel simulation result gathering, parallel trajectory data assembling, and analysis) can be effectively pipelined. This implies that all phases can effectively work on data streams. Ideally, an efficient and portable implementation of the simulation-analysis workflow should be able to represent streams as<italic> first-class concept</italic> and provide the designers with<italic> high-level</italic> programming constructs to manage them efficiently (also in multicore platforms).</p><p>To date, application programming for bioinformatics (and other sciences) has not embraced much more than low-level communication and synchronization libraries. In the hierarchy of abstractions, it is only slightly above toggling absolute binary in the front panel of the machine. The advent and the pervasiveness of multicore platforms are pushing parallel programming outside its historical niche. Next generation software should be designed not only to be<italic> efficient</italic> on these platforms, but also to be developed and tuned with<italic> high-productivity</italic> and reduced time-to-market. This is particularly important when parallel computing serves as a tool for other sciences since nonexpert designers should be able to experiment different algorithmic solutions for both simulations and data analysis.</p><p>Attempts to reduce the programming effort by raising the level of abstraction through the provision of parallel programming frameworks date back at least three decades and have resulted in a number of significant contributions. Notable among these is the<italic> skeletal</italic> approach [<xref rid="B23" ref-type="bibr">17</xref>] (a.k.a.<italic> pattern-based</italic> parallel programming), which appears to become increasingly popular after being revamped by several successful parallel programming frameworks [<xref rid="B25" ref-type="bibr">18</xref>&#x02013;<xref rid="B11" ref-type="bibr">20</xref>].<italic> Skeletons</italic> (a.k.a. patterns) capture common parallel programming paradigms (e.g., Map, Reduce, MapReduce, Pipeline, Farm, and Divide&#x00026;Conquer) and make them available to the programmer as high-level programming constructs equipped with well-defined functional and extrafunctional semantics [<xref rid="B6" ref-type="bibr">21</xref>]. Some of them are specifically designed to manage stream as first-class objects, such as<italic> pipeline</italic>,<italic> farm</italic> (a.k.a. master-worker pattern), and<italic> loop</italic> patterns.</p><p>A particularly efficient implementation of the described patterns is provided by the FastFlow parallel programming framework [<xref rid="B7" ref-type="bibr">22</xref>]. FastFlow is a C++ open-source template library aimed at simplifying the development of efficient applications for multicore platforms. FastFlow eases the development and guaranteed runtime efficiency by raising the abstraction level of the design phase, thus providing developers with a set of optimised parallel programming patterns [<xref rid="B7" ref-type="bibr">22</xref>, <xref rid="B1" ref-type="bibr">23</xref>]. Run-time efficiency is mainly achieved by way of a lock-less implementation of patterns exhibiting a speed edge against other popular parallel programming frameworks (also see performance comparisons in [<xref rid="B8" ref-type="bibr">24</xref>]). The FastFlow implementation of the pipeline, loop, and farm patterns is exploited to design the CWC simulation workflow. The effectiveness of the FastFlow framework in high-frequency synchronizations (i.e., fine-grained tasks) at a high-level of abstraction is the key features to devise a portable and efficient implementation of the simulation workflow, which is CWC simulator with online parallel analysis: architecture, composed by a three-stage pipeline: simulation, analysis, and display of results. The former two stages are in turn pipelines of other stages, whereas the display of results is realized by way of a graphical user interface (GUI). The big picture of the simulation workflow is shown in <xref ref-type="fig" rid="fig1">Figure 1</xref>. In the picture, all the grey boxes as well as all the code needed for synchronization and data streaming (double-headed arrows) are automatically generated by the FastFlow framework. The implementation of the whole software actually consists in declaring the structure of the workflow in terms of FastFlow objects (i.e., farm and pipelines) and filling white boxes with sequential code. All data is passed by using their references, in such a way that no data copies in memory are needed.</p><sec id="sec2.1.1"><title>2.1.1. The Simulation Pipeline</title><p>The simulation pipeline, as shown in <xref ref-type="fig" rid="fig1">Figure 1</xref>, is composed by three main stages: (i)<italic> generation of simulation tasks</italic>, (ii)<italic> farm of simulation engines,</italic> and (iii)<italic> alignment of trajectories</italic>.</p><p>The input of the simulation pipeline (from the GUI or a file) is the model to be simulated and the parameters of the simulation. The output is a stream of simulation results, each of them being an array holding a point for each of the trajectories of all (independent) simulations aligned at a given simulation time. Actually, each array represents a cut at a given simulation time of the whole dataset of results. This does not necessarily represent the current status (at a given point in wall-clock time) of all running simulations. By their very nature, stochastic processes exhibit an irregular behavior in space and time, since different simulations may cover the same simulation timespan following many different, randomly chosen, paths and number of iterations. Therefore, parallelization tools should support the dynamic and active balancing of workload across the involved cores. This mainly motivates the structure of the simulation pipeline. The first stage generates a number of independent simulation tasks, each of them wrapped in a C++ object. These objects are passed to the farm of simulation engines, which dispatch them (on-demand) to a number of simulation engines (sim eng). Each simulation engine brings forward a simulation for a given simulation time (simulation quantum) then reschedules back the simulation along the feedback channel. Simulation results produced in this quantum are streamed toward the next stage which sorts out all the received results and aligns them according to simulation time. Once all simulation tasks overcome a given simulation time, an array of results is produced and streamed to the analysis pipeline.</p><p>In this process, the farm schedule prioritizes &#x0201c;slow&#x0201d; simulation tasks, in such a way that the simulation tasks proceed with simulation times the more aligned as possible. This solves the load balancing problem by keeping all simulation engines always busy and reduces to the minimum the transient storage of incomplete results, thus reducing the shared memory traffic.</p></sec><sec id="sec2.1.2"><title>2.1.2. The Analysis Pipeline</title><p>By design, each snapshot at a given simulation time of all simulation trajectories (i.e., an array of simulation results) can be analyzed immediately and independently (thus concurrently) on each other. For example, the mean and variance (as well as other statistical estimators) can be immediately computed and streamed out to the display stage. More complex analyses, that is, the ones aimed to understand system dynamics, have further requirements. In the most general case, they require the access to the whole dataset. Unfortunately this can be hardly done with a fully online process. In many cases, however, it is possible to derive reasonable approximations of these analyses from a sliding window of the whole dataset (e.g., for trajectory clustering). For this, the stream incoming in the analysis pipeline is passed through a stage that creates a stream of (partially overlapping) sliding windows of trajectories cuts. Each sliding window can be eventually processed in parallel and therefore is dispatched to a farm of statistic engines. Results are collected and reordered (i.e., gathered) and streamed toward the user interface and the permanent storage.</p><p>The analysis pipeline is provided with three families of predefined estimators covering the most common instruments of statistical analyses. Thanks to high-level modular design of the simulation pipeline, it can be easily extended with new filters. Current filters included in the system are as follows.</p><p>(<italic>1) Mean, Standard Deviation, and Quantiles</italic>. These standard statistical estimators are typically used to evaluate, both qualitatively and quantitatively, the behavior of stable systems and the reliability of the stochastic models used for their simulation. Quantiles are also often useful to approximate the distribution of simulation trajectories over time as it performs a histogram which summarizes the involved quantities without the effects of long-tailored asymmetric distribution or outliers. In fact, in those cases, descriptive statistics could not underline a central tendency.</p><p>(<italic>2) Trajectory Clustering</italic>. The clustering of trajectories helps the analysis of biological systems exhibiting a multistable behavior. Each cluster can automatically separate and distinguish different cases which can be eventually analyzed by statistical estimators. Concentrations of elements, in a given instant, from all simulations, are numerically filtered from stochastic noise and the global trends are extrapolated from clusters. In this work we employed two clustering techniques:<italic> K</italic>-means [<xref rid="B31" ref-type="bibr">25</xref>] and quality threshold (QT) [<xref rid="B33" ref-type="bibr">26</xref>] clustering. The clustering procedure collects the filtered data contained into a sliding time window &#x00394;<sub><italic>W</italic></sub> centered in the current data point <italic>x</italic>
<sub><italic>i</italic></sub> &#x02261; <italic>f</italic>(<italic>t</italic>
<sub><italic>i</italic></sub>) where <italic>t</italic>
<sub><italic>i</italic></sub> &#x02261; <italic>t</italic>
<sub>0</sub> + <italic>i</italic>&#x00394;<sub><italic>S</italic></sub> (where &#x00394;<sub><italic>S</italic></sub> is a constant sampling time) for all simulation trajectories and the extrapolated forecast point, <italic>x</italic>
<sub><italic>i</italic></sub>
<sup><italic>E</italic></sup>, referred to the local trend, using the information of the Savitzky-Golay filter [<xref rid="B48" ref-type="bibr">27</xref>], that is, a low-pass filter suitable for data smoothing. The main idea underneath Savitzky-Golay filtering is to find filter coefficients <italic>c</italic>
<sub><italic>n</italic></sub> that preserve higher moments, that is, to approximate the underlying function within the moving window not by a constant (whose estimate is the average) but by a polynomial of higher order. This schema also allows the computation of numerical derivatives considering the coefficient of the derived polynomial.</p><p>(<italic>3) Peak/Frequency Detection</italic>. Many processes in living organisms are oscillatory. For these kinds of systems the analysis must be focused on the recurrence of phenomena, for instance concentration spikes or peaks of biological quantities, which also make it possible to determine the frequency of occurrence of a given phenomenon. The peak detection is basically performed by way of the analysis of the local maximum in a continuous curve, which is in turn detected through the analysis of the derivatives of the curve estimated by the Savitzky-Golay filter. From the period between successive peaks, the frequency of the related event is then inferred.</p><p>The usage examples of each family of filters will be discussed in the &#x0201c;results&#x0201d; section.</p></sec><sec id="sec2.1.3"><title>2.1.3. The Graphical User Interface</title><p>The CWC simulation-analysis pipeline is wrapped in a back-end tool that can be steered either via a command line tool or via a graphical user interface. This makes it possible to design the biological model, to run simulations and analysis, and to view partial results during the run. Also, the front-end makes it possible to control the simulation workflow from a remote machine. Two screenshots of the graphical front-end are reported in <xref ref-type="fig" rid="fig2">Figure 2</xref>.</p></sec></sec></sec><sec id="sec3"><title>3. Experiments and Results</title><p>The evaluation of the integrated approach will be focused on the efficiency and speedup of the tool in executing the simulation and online analysis workflow on multicore platforms. In this respect, paradigmatic examples of two challenging classes of biological systems are discussed, that is bistable/multistable, and oscillatory systems. The key behavior of these systems is studied by way of the different classes of online analysis tools introduced in the previous section, in particular, statistical description, clustering, and peak/frequency detection.</p><sec id="sec3.1"><title>3.1. Expressivity and Effectiveness</title><sec id="sec3.1.1"><title>3.1.1. Multistable Biological System (Schl&#x000f6;gl Model)</title><p>One of the most studied examples of bistability is the Schl&#x000f6;gl model [<xref rid="B49" ref-type="bibr">28</xref>]. The simplicity of this network makes it an ideal prototype to show the effectiveness of the online clustering techniques on the filtered trajectories in the presence of bimodality. The set of reaction rules modeling this system are
<disp-formula id="eq1"><label>(1)</label><mml:math id="M1"><mml:mtable><mml:mtr><mml:mtd><mml:mi>A</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>A</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.03</mml:mn></mml:mover><mml:mi>A</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>A</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>A</mml:mi><mml:mo>&#x02003;</mml:mo><mml:mo>&#x02003;</mml:mo><mml:mi>A</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>A</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>A</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.0001</mml:mn></mml:mover><mml:mi>A</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>A</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>B</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">200</mml:mn></mml:mover><mml:mi>B</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>A</mml:mi><mml:mo>&#x02003;</mml:mo><mml:mo>&#x02003;</mml:mo><mml:mi>A</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">3.5</mml:mn></mml:mover><mml:mo>&#x02022;</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
where the rules are decorated with the kinetic constants of the corresponding reactions and all reaction rates are evaluated according to the mass action law.</p><p>The number of molecules of the species <italic>B</italic> is kept constant (buffered), while at equilibrium, the species <italic>A</italic> displays a noise-induced switching between the two stable steady states (see <xref ref-type="fig" rid="fig3">Figure 3</xref>). This case is paradigmatic to show that simple mean and standard deviation are not significant to summarize the overall behavior and the mean is not representative of any simulation trajectory.</p><p>
<xref ref-type="fig" rid="fig3">Figure 3</xref> shows the resulting clusters computed online using<italic> K</italic>-means on the Schl&#x000f6;gl model for species <italic>A</italic> over 480 stochastic simulations starting with the term <italic>B</italic>&#x02009;&#x02009;250&#x02217;<italic>A</italic>. The lines width of the<italic> K</italic>-means plot is proportional to each cluster size.</p></sec><sec id="sec3.1.2"><title>3.1.2. Multistable System (Bacteriophage <italic>&#x003bb;</italic> Life Cycle)</title><p>One of the best studied examples of multistability in genetic systems is the bacteriophage <italic>&#x003bb;</italic> life cycle [<xref rid="B10" ref-type="bibr">29</xref>]. This process involves two different biological entities delimited by membranes, the phage, and the bacterium. Lambda phage is a virus consisting of a head, containing a double-stranded linear DNA and a tail. The phage recognizes and binds to its host,<italic> Escherichia Coli</italic>, causing the DNA in the head of the phage to be ejected through the tail into the cytoplasm of the bacterial cell. After this, it can enter into one of two alternative stages called lysogeny and lysis. The lysogenic stage is a dormant stage in which the phage DNA is inserted into the host DNA and passively reproduces with the host. The only protein expressed in this phase is the <italic>&#x003bb;</italic> repressor <italic>CI</italic>. When the host becomes stressed, the phage is more likely to go into lysis, in which case it reproduces more phages, kills the host, and spreads to other bacteria. The decision between lysis and lysogeny can be thought of as a switching mechanism. A simplified model for the bacteriophage was proposed in [<xref rid="B32" ref-type="bibr">30</xref>]. In their model, the gene cI expresses the <italic>&#x003bb;</italic> repressor (<italic>CI</italic>) which dimerises (<italic>CI</italic>2) and binds to DNA (<italic>D</italic>) as a transcription factor at either of the two binding sites. The binding of the transcription factor to the site enhancing the transcription of <italic>CI</italic> (positive feedback) is represented by <italic>D</italic>
<sup>+</sup>
<italic>CI</italic>2. The phagic DNA in state <italic>D</italic>
<sup>+</sup>
<italic>CI</italic>2 leads the lysogenic stage. The binding of the transcription factor to the site repressing the transcription of <italic>CI</italic> (negative feedback) is denoted by <italic>D</italic>
<sup>&#x02212;</sup>
<italic>CI</italic>2. The notation <italic>D</italic>
<sup>+</sup>
<italic>CI</italic>2<italic>D</italic>
<sup>&#x02212;</sup>
<italic>CI</italic>2 models the phagic DNA when both sites are bound (<italic>CI</italic>2 can bind to the repressing site also when another <italic>CI</italic>2 dimer is bound to the promoting site, with a global repressing effect). The reaction rules in this system are
<disp-formula id="eq2"><label>(2)</label><mml:math id="M2"><mml:mtable><mml:mtr><mml:mtd><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.05</mml:mn></mml:mover><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mo>&#x02003;</mml:mo><mml:mo>&#x02003;</mml:mo><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.5</mml:mn></mml:mover><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>C</mml:mi><mml:mi>I</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>D</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.026</mml:mn></mml:mover><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mo>&#x02003;</mml:mo><mml:mo>&#x02003;</mml:mo><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.026</mml:mn></mml:mover><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>D</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>D</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.026</mml:mn></mml:mover><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>&#x02212;</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mo>&#x02003;</mml:mo><mml:mo>&#x02003;</mml:mo><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>&#x02212;</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.026</mml:mn></mml:mover><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>D</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.13</mml:mn></mml:mover><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>&#x02212;</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>&#x02212;</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.13</mml:mn></mml:mover><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>P</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">40</mml:mn></mml:mover><mml:msup><mml:mrow><mml:mi>D</mml:mi></mml:mrow><mml:mrow><mml:mo>+</mml:mo></mml:mrow></mml:msup><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>P</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mo>&#x02003;</mml:mo><mml:mo>&#x02003;</mml:mo><mml:mi>C</mml:mi><mml:mi>I</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.0007</mml:mn></mml:mover><mml:mo>&#x02022;</mml:mo><mml:mo>,</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
where <italic>P</italic> represents the RNA polymerase, assumed here to be constant, and two proteins per mRNA transcript were considered. In this model, the stochastic time trajectories of <italic>CI</italic> switch between two stable equilibria if the noise amplitude is sufficient to drive the trajectories occasionally out of the basin of attraction of one equilibrium into the basin of attraction of the other equilibrium (see <xref ref-type="fig" rid="fig4">Figure 4(a)</xref>).</p><p>
<xref ref-type="fig" rid="fig4">Figure 4(b)</xref> shows the resulting clusters (gray circles) computed online using QT on the <italic>&#x003bb;</italic>-phage model for species <italic>CI</italic> over 1200 stochastic simulations starting with the term 10&#x02217;<italic>CI</italic>&#x02009;&#x02009;
<italic>D</italic>&#x02009;&#x02009;
<italic>P</italic>. Circles diameters are proportional to each cluster size and arrows display the local trends of the clustered trajectories.</p><p>
<italic>K</italic>-means is suitable for stable switch systems where the number of clusters and their tendencies are known in advance, in the other cases QT, although more computationally expensive, can build accurate partitions of trajectories giving evidence of instabilities with a dynamic number of clusters.</p></sec><sec id="sec3.1.3"><title>3.1.3. Oscillatory System (Circadian Oscillations of Neurospora)</title><p>We examine here the theoretical model for circadian oscillations based on transcriptional regulation of the frequency (frq) gene in the fungus<italic> Neurospora</italic>. The model relies on the feedback exerted on the expression of the frq gene by its protein product FRQ &#x000b7; FRQ<sub>in</sub> represents the FRQ protein inside the nucleus. In this model, sustained rhythmic variations in protein and mRNA (<italic>M</italic>) levels occur in the form of limit cycle oscillations [<xref rid="B39" ref-type="bibr">31</xref>]. In describing this system we exploit a feature of CWC which allows computing the rate of some reaction with an ad hoc function used to represent nonstandard kinetics. The reaction rules modeling this case are
<disp-formula id="eq3"><label>(3)</label><mml:math id="M3"><mml:mtable><mml:mtr><mml:mtd><mml:mtext>FR</mml:mtext><mml:msub><mml:mrow><mml:mtext>Q</mml:mtext></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mtext>FR</mml:mtext><mml:msub><mml:mrow><mml:mtext>Q</mml:mtext></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mo minsize="0.75em" maxsize="0.75em">(</mml:mo><mml:mi>t</mml:mi><mml:mo minsize="0.75em" maxsize="0.75em">)</mml:mo></mml:mrow></mml:msub></mml:mover><mml:mtext>FR</mml:mtext><mml:msub><mml:mrow><mml:mtext>Q</mml:mtext></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mi>M</mml:mi></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>M</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.5</mml:mn></mml:mover><mml:mi>M</mml:mi><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mtext>FRQ</mml:mtext></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mi>M</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mi>M</mml:mi></mml:mrow></mml:msub></mml:mover><mml:mo>&#x02022;</mml:mo><mml:mo>&#x02003;</mml:mo><mml:mo>&#x02003;</mml:mo><mml:mi>&#x022a4;</mml:mi><mml:mo>:</mml:mo><mml:mtext>FRQ</mml:mtext><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:msub><mml:mrow><mml:mi>f</mml:mi></mml:mrow><mml:mrow><mml:mi>d</mml:mi></mml:mrow></mml:msub></mml:mover><mml:mo>&#x02022;</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>FRQ</mml:mtext><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.5</mml:mn></mml:mover><mml:mtext>FR</mml:mtext><mml:msub><mml:mrow><mml:mtext>Q</mml:mtext></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mtext>FR</mml:mtext><mml:msub><mml:mrow><mml:mtext>Q</mml:mtext></mml:mrow><mml:mrow><mml:mtext>in</mml:mtext></mml:mrow></mml:msub><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mover><mml:mrow><mml:mo>&#x027fc;</mml:mo></mml:mrow><mml:mn mathvariant="normal">0.6</mml:mn></mml:mover><mml:mtext>FRQ</mml:mtext><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
</p><p>The model is based on the negative feedback exerted by the protein FRQ on the transcription of the frq gene; the rate of gene expression is enhanced by light. The model includes gene transcription in the nucleus, accumulation of the corresponding mRNA in the cytosol with the associated protein synthesis, protein transport into and out of the nucleus, and regulation of gene expression by the nuclear form of the FRQ protein. The function <italic>f</italic>
<sub>FRQ</sub>(<italic>t</italic>) = <italic>v</italic>
<sub><italic>s</italic></sub>(<italic>t</italic>)(<italic>K</italic>
<sub><italic>I</italic></sub>
<sup><italic>n</italic></sup>/(#FRQ<sup><italic>n</italic></sup> + <italic>K</italic>
<sub><italic>I</italic></sub>
<sup><italic>n</italic></sup>)) denotes the rate of frq transcription where #FRQ denotes the number of FRQ elements at the moment in which the reaction takes place. The parameter <italic>v</italic>
<sub><italic>s</italic></sub>(<italic>t</italic>) defined by:
<disp-formula id="eq4"><label>(4)</label><mml:math id="M4"><mml:mtable><mml:mtr><mml:mtd><mml:malignmark/><mml:msub><mml:mrow><mml:mi>v</mml:mi></mml:mrow><mml:mrow><mml:mi>s</mml:mi></mml:mrow></mml:msub><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:mo>=</mml:mo><mml:mrow><mml:mo symmetric="false">{</mml:mo><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mn mathvariant="normal">160</mml:mn><mml:mo>&#x02003;</mml:mo><mml:mtext>when</mml:mtext><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mn mathvariant="normal">2</mml:mn><mml:mi>n</mml:mi><mml:mi>T</mml:mi><mml:mo>&#x02264;</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x0003c;</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mn mathvariant="normal">2</mml:mn><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mn mathvariant="normal">1</mml:mn><mml:mo>)</mml:mo></mml:mrow><mml:mi>T</mml:mi></mml:mtd><mml:mtd columnalign="left"/></mml:mtr><mml:mtr><mml:mtd columnalign="left"><mml:mn mathvariant="normal">200</mml:mn><mml:mo>&#x02003;</mml:mo><mml:mtext>when</mml:mtext><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mn mathvariant="normal">2</mml:mn><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mn mathvariant="normal">1</mml:mn><mml:mo>)</mml:mo></mml:mrow><mml:mi>T</mml:mi><mml:mo>&#x02264;</mml:mo><mml:mi>t</mml:mi><mml:mo>&#x0003c;</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mn mathvariant="normal">2</mml:mn><mml:mi>n</mml:mi><mml:mo>+</mml:mo><mml:mn mathvariant="normal">2</mml:mn><mml:mo>)</mml:mo></mml:mrow><mml:mi>T</mml:mi></mml:mtd><mml:mtd columnalign="left"/></mml:mtr></mml:mtable></mml:mrow></mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mi>n</mml:mi><mml:mo>&#x02265;</mml:mo><mml:mn mathvariant="normal">0</mml:mn><mml:mo>)</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
increases in light conditions of the current time of the simulation, where <italic>T</italic> represents the period of the dark-light phases. The constant <italic>K</italic>
<sub><italic>I</italic></sub> is related to the threshold beyond which nuclear FRQ represses frq transcription; the Hill coefficient, <italic>n</italic>, characterizes the degree of cooperativity of the repression process. In the functions, the name of an atom indicates its multiplicity. The mRNA degradation is given by the Michaelis rate function <italic>f</italic>
<sub><italic>M</italic></sub> = <italic>v</italic>
<sub><italic>m</italic></sub>(#<italic>M</italic>/(<italic>K</italic>
<sub><italic>M</italic></sub> + #<italic>M</italic>)). The FRQ degradation is given by the Michaelis rate function <italic>f</italic>
<sub><italic>d</italic></sub> = <italic>v</italic>
<sub><italic>d</italic></sub>(#FRQ/(<italic>K</italic>
<sub><italic>d</italic></sub> + #FRQ)), where <italic>v</italic>
<sub><italic>d</italic></sub> is the maximum rate of FRQ degradation and the Michaelis constant related to this process is <italic>K</italic>
<sub><italic>d</italic></sub>.</p><p>As in [<xref rid="B39" ref-type="bibr">31</xref>] we modeled the oscillations under two different conditions: (i) constant dark conditionand (ii) alternate light and dark phases. Following [<xref rid="B39" ref-type="bibr">31</xref>], the values of the parameters are set as <italic>v</italic>
<sub><italic>m</italic></sub> = 50.5, <italic>v</italic>
<sub><italic>d</italic></sub> = 140, <italic>k</italic>
<sub><italic>s</italic></sub> = 0.5, <italic>k</italic>
<sub>1</sub> = 0.5, <italic>k</italic>
<sub>2</sub> = 0.6, <italic>K</italic>
<sub><italic>m</italic></sub> = 50, <italic>K</italic>
<sub><italic>I</italic></sub> = 100, <italic>K</italic>
<sub><italic>d</italic></sub> = 13, and <italic>n</italic> = 4. Concentrations have been made discrete by scaling 1&#x02009;nM to 100 atomic elements. In the constant dark condition, parameter <italic>v</italic>
<sub><italic>s</italic></sub> is equal to 160, in the alternate condition, <italic>v</italic>
<sub><italic>s</italic></sub> is equal to 160 during the dark phase and to 200 during the light phase. <xref ref-type="fig" rid="fig5"> Figure 5(a)</xref> shows an extract of a single stochastic simulation of the circadian oscillations in the dark/light alternate condition, plotting the number of FRQ proteins within the nucleus, the total number of FRQ proteins in the cell and the number of mRNA molecules leading the synthesis of FRQ. <xref ref-type="fig" rid="fig5"> Figure 5(b)</xref> shows the outcome of the peak detection tool which is able to summarize the frequency of the peak events over time. The plot results after capturing the peaks in the curve of the cytosolic mRNA for the FRQ protein synthesis. Measuring the distance between two consecutive peaks, we compute the period of each oscillation and then plot the moving average, over 5000 simulations, of the local periods. In the constant dark condition, the circadian period is close to 21 and a half hours, but increases, producing damping oscillations with a period of approximately 24 hours, in the dark/light alternate condition.</p></sec></sec><sec id="sec3.2"><title>3.2. Performances</title><p>All reported experiments were run on an Intel workstation equipped with 4 eight-core E7-4820 Nehalem (32 cores, 64 contexts) @2.0&#x02009;GHz with 18&#x02009;MB L3 cache and 64&#x02009;GBytes of main memory with Linux x86_64.</p><p>The analysis pipeline is configured with 3 statistic engines executing mean, standard deviation, quantiles,<italic> K</italic>-means, QT, and frequency detection filters. For each experiment the total number of FastFlow nodes, that is, the boxes depicted with solid lines in <xref ref-type="fig" rid="fig1">Figure 1</xref>, is
<disp-formula id="eq5"><label>(5)</label><mml:math id="M5"><mml:mtable><mml:mtr><mml:mtd><mml:malignmark/><mml:mtable><mml:mtr><mml:mtd><mml:mo>#</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mtext>sim</mml:mtext><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mtext>eng</mml:mtext><mml:mo>)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mo>#</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mtext>stat</mml:mtext><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mtext>eng</mml:mtext><mml:mo>)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mo>#</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mtext>other</mml:mtext><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mtext>nodes</mml:mtext></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:maligngroup/><mml:malignmark/><mml:mo>&#x02003;</mml:mo><mml:mo>+</mml:mo><mml:mo>#</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mtext>FastFlow</mml:mtext><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mtext>support</mml:mtext><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mtext>nodes</mml:mtext><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mo>#</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mtext>sim</mml:mtext><mml:mi>&#x02009;&#x02009;</mml:mi><mml:mtext>eng</mml:mtext><mml:mo>)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mn mathvariant="normal">3</mml:mn><mml:mo>+</mml:mo><mml:mn mathvariant="normal">3</mml:mn><mml:mo>+</mml:mo><mml:mn mathvariant="normal">4</mml:mn><mml:mo>,</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
where other nodes are &#x0201c;generation if simulation tasks,&#x0201d; &#x0201c;alignment of trajectories,&#x0201d; and &#x0201c;generation if sliding windows of trajectories&#x0201d; nodes, whereas FastFlow support nodes are the two couples of dispatch-gather nodes in <xref ref-type="fig" rid="fig1">Figure 1</xref>. Each node in the FastFlow run-time support is implemented by a POSIX (portable operating system interface for uniX) thread using a nonblocking execution model.</p><p>As we shall see, the number of statistical engines has been chosen according to a simple but effective performance model, which is made possible by the high-level approach of the design. According to the same model, the most interesting sensitivity analysis under performance viewpoint concerns the number of simulation engines.</p><p>As a case study, we consider the simulation workflow for the transcriptional regulation of the Neurospora.</p><p>
<xref ref-type="fig" rid="fig6">Figure 6</xref> shows the speedup obtained for the whole workflow on varying the number of concurrent simulation engines, where the simulation points (or<italic> samples</italic>) per trajectory is set to be 10<sup>4</sup> and 10<sup>6</sup> simulation points.</p><p>The speedup on the total execution time achieved in the former case (<xref ref-type="fig" rid="fig6">Figure 6(a)</xref>) scales ideally with respect to the number of simulation engines, whereas a performance penalty is paid in the latter case (<xref ref-type="fig" rid="fig6">Figure 6(b)</xref>) for the highest degree of parallelism and number of produced trajectories.</p><p>The very same speedup behaviour is achieved for other test cases and it is worth a detailed discussion. For each performance experiment all the runs are executed by fixing random seeds. Thus, given a set of simulation parameters, it can be verified that each stochastic simulation of a single trajectory requires exactly the same number of iterations and the simulated time progress identically across random walks irrespectively of the number of simulation/statistic engines and<italic> observed</italic> simulation points, which can be considered a (synchronized) sampling at fixed simulation times of trajectories. These observations imply the following.<list list-type="roman-lower"><list-item><p>The parallelism strategy does not break determinism and reproducibility of results (correctness).</p></list-item><list-item><p>As reflected in the speedup results, the design of the simulator ensures effective load balancing and low synchronization overheads.</p></list-item><list-item><p>The efficiency of parallel executions depends on the order of magnitude of the observed simulation points and by the number of produced trajectories.</p></list-item></list>
</p><p>This latter point specifically exploits the working hypothesis: stochastic methods are particularly informative when used to simulate the model at high resolution, that is, high number of samples and trajectories. In this case, the main bottleneck of the simulation software is data movement and management since the computation/data-movement ratio may easily reach the limits of modern multicore platforms.</p><p>In multicore platforms, &#x0201c;observing&#x0201d; the phenomena is a key issue in the simulation-analysis workflow as the frequency of observation determines both the quality of results and, inversely, the overall speedup. As shown in <xref ref-type="fig" rid="fig6">Figure 6</xref> and <xref ref-type="table" rid="tab1">Table 1</xref>, the proposed design and implementation effectively cope with this trade-off and succeed to exploit high rates of data movement. Thanks to merging many independent trajectories happening in the simulation pipeline, the output size, and, thus, the required disk throughput is greatly reduced (unless the storage of raw simulation results, happening among the two pipelines, is requested by the user).</p><p>The proposed simulation architecture is not only fast but also highly predictable in term of performance. This latter aspect is mainly due to the high-level structured design [<xref rid="B5" ref-type="bibr">32</xref>]. The whole workflow is a pipeline of two pipelines (i.e., a pipeline), whose performance can be modeled by means of the<italic> service time </italic>(<italic>Ts</italic>) of each stage <italic>S</italic>
<sub><italic>i</italic></sub>. In particular
<disp-formula id="eq6"><label>(6)</label><mml:math id="M6"><mml:mtable><mml:mtr><mml:mtd><mml:mi>T</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi mathvariant="sans-serif">p</mml:mi><mml:mi mathvariant="sans-serif">i</mml:mi><mml:mi mathvariant="sans-serif">p</mml:mi><mml:mi mathvariant="sans-serif">e</mml:mi><mml:mi mathvariant="sans-serif">l</mml:mi><mml:mi mathvariant="sans-serif">i</mml:mi><mml:mi mathvariant="sans-serif">n</mml:mi><mml:mi mathvariant="sans-serif">e</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mn mathvariant="normal">1</mml:mn></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>&#x02026;</mml:mo><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>max</mml:mi><mml:mo>&#x02061;</mml:mo><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mi>T</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mn mathvariant="normal">1</mml:mn></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>,</mml:mo><mml:mo>&#x02026;</mml:mo><mml:mi>T</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mrow><mml:mi>S</mml:mi></mml:mrow><mml:mrow><mml:mi>k</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>}</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
where <italic>Ts</italic>(<italic>S</italic>
<sub><italic>i</italic></sub>) models the average interdeparture time of stream items of the stage <italic>i</italic> of the pipeline, which actually matches the average computation time of <italic>S</italic>
<sub><italic>i</italic></sub> to produce one stream item. In turn, some of the stages are farm, which exploit <italic>n</italic> independent replicas of a (sequential or parallel) worker, for example simulation and static engines. Its service time can be modeled as
<disp-formula id="eq7"><label>(7)</label><mml:math id="M7"><mml:mtable><mml:mtr><mml:mtd><mml:mi>T</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi mathvariant="sans-serif">f</mml:mi><mml:mi mathvariant="sans-serif">a</mml:mi><mml:mi mathvariant="sans-serif">r</mml:mi><mml:mi mathvariant="sans-serif">m</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>W</mml:mi><mml:mo>,</mml:mo><mml:mi>n</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>T</mml:mi><mml:mi>s</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>W</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mi>n</mml:mi></mml:mrow></mml:mfrac><mml:mo>.</mml:mo></mml:mtd></mml:mtr></mml:mtable></mml:math></disp-formula>
</p><p>Given the service time of each sequential stage, for example, measured in the sequential code, these equations can be also used to tune the optimal number of workers <italic>n</italic> for any new simulation problem and to understand its upper bound in term of speedup. As an example, in the Neurospora with 10<sup>5</sup> samples test case the sequential code exhibits the following timing per trajectory: <italic>Ts</italic>(generation)~0, <italic>Ts</italic>(sim eng) = 5.3&#x02009;s, <italic>Ts</italic>(alignment) = 0.11&#x02009;s, <italic>Ts</italic>(windows generation) = 0.02&#x02009;s, and <italic>Ts</italic>(stat eng) = 0.33&#x02009;s, with a total execution time for each trajectory of ~5.8&#x02009;s (~120 minutes for 1200 trajectories). Among those, sim eng and stat eng are used within a farm, thus their service time can be reduced by increasing the number of workers. Therefore, the maximum performance and efficiency of the whole workflow are reached when the two farms are tuned to match the service time of the slowest sequential stage, that is, the alignment stage 0.11&#x02009;s. For this, the farm in the simulation pipeline should be configured with <italic>n</italic> = 5.3/0.11 &#x02248; 48 workers, whereas the farm in the analysis pipeline with <italic>n</italic> = 0.33/0.11 = 3 workers. The overall speedup upper bound can be obtained using the total execution time and the slowest stage service time, that is, maximum speedup achievable for this test case is <italic>&#x02248;</italic>5.8/0.11 = 53, which includes the contributes from both pipeline and farm. The analysis, despite being approximated since it does not include synchronization overheads and memory bandwidth limits, is adherent of results depicted in the left plot of <xref ref-type="fig" rid="fig6">Figure 6</xref>. The speedup linearly grows with the number of simulation engines in the <italic>n</italic> = [1 &#x022ef; 32] range. The primary reasons of the slight performance drop in the right end of the plots is due to the fact that more virtual cores (i.e., hyperthread contexts) than physical core are used and the increased memory traffic for high numbers of trajectories. Furthermore, the performance analysis highlights that the bottleneck of the architecture for high throughput problems, which is in the alignment of trajectory stage. Its parallelization, which can be addressed by pipelining simulation engines and a partial alignment stage within the farm, is among future works.</p><p>However, this simple reasoning does not apply when a big number of trajectories are modeled. In fact, in such cases, the main architecture bottleneck when using a high number of simulation engines is the memory bandwidth limit of the underlying platform. Such effect can be seen in the right plot of <xref ref-type="fig" rid="fig6">Figure 6</xref> for the case of 1200 trajectories.</p></sec></sec><sec id="sec4"><title>4. Discussion and Related Works</title><p>In the field of biological modeling, tools such as SPiM [<xref rid="B43" ref-type="bibr">33</xref>, <xref rid="B44" ref-type="bibr">34</xref>] and Dizzy [<xref rid="B45" ref-type="bibr">35</xref>] have been used to capture first order approximations to system dynamics using a combination of stochastic simulation and differential equation approximation. SPiM has long been the standard tool for simulating stochastic <italic>&#x003c0;</italic> calculus models.</p><p>Bio-PEPA [<xref rid="B22" ref-type="bibr">36</xref>] is a timed process algebra designed for the description of biological phenomena and their analysis through quantitative methods such as stochastic simulation and probabilistic model-checking. Two software tools are available for modeling with Bio-PEPA: the Bio-PEPA Workbench and the Bio-PEPA Eclipse Plugin [<xref rid="B21" ref-type="bibr">37</xref>].</p><p>The parallelization of stochastic simulators has been extensively studied in the last two decades. Many of these efforts focus on distributed architectures. Our work differs from these efforts in three aspects (see discussion below): (1) it addresses multicore-specific parallelization issues; (2) it advocates a general parallelization schema rather than a specific simulator, and (3) it addresses the online data analysis, thus it is designed to manage large streams of data. To the best of our knowledge, many related works cover some of these aspects, but few of them address all three aspects.</p><p>The Swarm algorithm [<xref rid="B46" ref-type="bibr">38</xref>], which is well suited for biochemical pathway optimisation, has been used in a distributed environment. An example is Grid Cellware [<xref rid="B27" ref-type="bibr">39</xref>], a grid-based modeling and simulation tool for the analysis of biological pathways that offers an integrated environment for several mathematical representations ranging from stochastic to deterministic algorithms.</p><p>DiVinE is a general distributed verification environment meant to support the development of distributed enumerative model checking algorithms including probabilistic analysis features used for biological systems analysis [<xref rid="B15" ref-type="bibr">40</xref>].</p><p>StochKit [<xref rid="B42" ref-type="bibr">41</xref>] is a C++ stochastic simulation framework. Among other methods, it implements the Gillespie algorithm and in its second version it targets multicore platforms, it is therefore similar to our work. It does not implement online trajectory reduction that is performed in a postprocessing phase. A first form of online reduction of simulation trajectories has been experimented within StochKit-FF [<xref rid="B3" ref-type="bibr">11</xref>], which is an extension of StochKit using the FastFlow runtime.</p><p>In [<xref rid="B36" ref-type="bibr">14</xref>] a parallel computing platform has been employed to simulate a large biochemical network in hundreds different cellular volumes using Gillespie stochastic simulation algorithm on multiple processors. Parallel computing techniques made it possible to run massive simulations in reasonable computational times. However, the analysis of the simulation results to characterize the intrinsic noise of the network has been done as a postprocessing step. We believe our parallelization framework could further improve those kinds of analyses.</p><p>Hy3S software package [<xref rid="B47" ref-type="bibr">13</xref>] that includes hybrid stochastic simulation algorithms and SRSim [<xref rid="B30" ref-type="bibr">42</xref>] that performs rule-based spatial modeling are both embarrassingly parallelized by way of the MPI (message passing interface) library. In this case, high latencies and communication connection problems of the computing clusters could decrease the speed efficiency.</p><p>An efficient parallelization of Gillespie's SSA on GPGPU has been presented by Li and Petzold [<xref rid="B34" ref-type="bibr">43</xref>], where parallelization is obtained by distributing the computation of each trajectory to a distinct unit. Online data analysis has not been addressed; segmentation of threads and online alignment of outputs seem difficult to achieve owing to the sharing restrictions imposed by GPGPU. StochSimGPU [<xref rid="B37" ref-type="bibr">44</xref>] exploits GPGPU for parallel stochastic simulations of biological systems. The tool allows computing averages and histograms of the molecular populations across the sampled realizations on the GPGPU. The tool leverages on a GPGPU-accelerated version of the MATLAB framewosrk that can be hardly compared in flexibility and performance with a C++ implementation. A GPGPU implementation of the CWC simulator is actually under development. In particular, GPGPU exploitation appears to be particularly suitable for the analysis of spatial models (see [<xref rid="B19" ref-type="bibr">45</xref>&#x02013;<xref rid="B20" ref-type="bibr">48</xref>]).</p><p>A schematic comparison of the main features of the biological simulation tools cited above is reported in <xref ref-type="table" rid="tab2">Table 2</xref>.</p><p>This paper does not provide computational comparisons with other systems. Actually, a comparative analysis of the performance of the presented framework with respect to other simulators would not be particularly informative for the following reasons: (1) the computational cost of the simulations presented in this paper is mainly dependent on the parameters of the output sampling (time needed to write on disk); (2) the performance of our system is partially affected by the computational cost of the run time statistics, which the other simulators do not provide (this accounts, e.g., of about 6% of the total simulation cost in the Neurospora example with 10<sup>5</sup> samples); (3) CWC, presented in this paper in a simplified form for the sake of readability uses a pattern matching algorithm in a compartmentalised setting (this makes it more expressive but computationally more expensive when compared with stochastic simulators implementing the Gillespie's algorithm in a flat scenario); and (4) another feature of CWC is the use of complex functions for computing the rate of reactions. So, for example, the model for the analysis of circadian oscillations of Neurospora cannot be directly simulated by Gillespie's algorithm.</p></sec><sec id="sec5"><title>5. Conclusions</title><p>In this paper we focused on a methodology to accelerate the simulation of stochastic models and analysis of simulation results on multicore platforms. We advocate a fully parallel simulation-analysis workflow as way to accelerate the simulation of stochastic model, to improve the likely to detect unknown system behaviors and to shorten the model tuning process thus improving tool usability.</p><p>We applied our methodology on a simulator for the calculus of wrapped compartments (CWC), a formal framework for modeling biological systems and their stochastic behavior. Even if we focused here on the integration of the simulation/analysis phases we demonstrate its efficiency and effectiveness by modeling three simple but paradigmatic examples of biological systems which are representative of different system dynamics, that is, multistable and oscillatory. All considered cases are representative of the kind of behaviors for which stochastic simulations have an expressivity edge onto classic ODEs. The ability of detecting interesting but unknown system behaviors is enhanced by the possibility of plugging in the workflow a set of user-defined statistic and mining tools that can be executed in parallel and while model simulation is still ongoing. In this respect our approach is, as far as we know, completely new.</p><p>Concerning the parallelization problem, we propose a fully parallel simulation-analysis tool that copes with several challenging problems, inter alia: close to ideal speedup and efficiency coupled with low code development effort; capability to manage high data throughput thus enhancing the precision of simulated models; and interactivity and reduced data size produced with respect to classic simulation-analysis sequential execution.</p><p>Many of these results are achieved by means of the FastFlow programming framework that provides a high-level of abstraction parallel programming methodology that exempt the programmer from direct management of synchronization and orchestration of concurrent activities. FastFlow provides low synchronization overhead and performance predictability, which makes it possible to design and tune a complex autobalancing, fully online simulation-analysis workflow that can produce data at a very high frequency and filter them in memory before being stored out-of-core avoiding the disk bottleneck.</p><p>The FastFlow framework and the CWC simulation-analysis workflow are open source software under LGPL license [<xref rid="B1" ref-type="bibr">23</xref>, <xref rid="B2" ref-type="bibr">49</xref>].</p></sec></body><back><ack><title>Acknowledgments</title><p>The authors wish to thank M. Mazumder and E. Macchia of Etica Srl for the simulator GUI implementation. This work has been supported by the BioBITs project (Converging technologies 2007, area: Biotechnology-ICT), Regione Piemonte, Italy, and by Paraphrase Project (FWP7 EC-STREP no. 288570).</p></ack><sec sec-type="conflict"><title>Conflict of Interests</title><p>The authors declare that they have no conflict of interests regarding the publication of this paper.</p></sec><ref-list><ref id="B29"><label>1</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gillespie</surname><given-names>DT</given-names></name></person-group><article-title>Exact stochastic simulation of coupled chemical reactions</article-title><source><italic>Journal of Physical Chemistry</italic></source><year>1977</year><volume>81</volume><issue>25</issue><fpage>2340</fpage><lpage>2361</lpage><pub-id pub-id-type="other">2-s2.0-33645429016</pub-id></element-citation></ref><ref id="B9"><label>2</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Alur</surname><given-names>R</given-names></name><name><surname>Belta</surname><given-names>C</given-names></name><name><surname>Ivan&#x0010d;i&#x00107;</surname><given-names>F</given-names></name><etal/></person-group><article-title>Hybrid modeling and simulation of biomolecular networks</article-title><volume>2034</volume><conf-name>Proceedings of the 4th International Workshop on Hybrid Systems: Computation and Control (HSCC '01)</conf-name><conf-date>2001</conf-date><conf-loc>Rome, Italy</conf-loc><publisher-name>Springer</publisher-name><fpage>19</fpage><lpage>32</lpage><series>Lecture Notes in Computer Science</series></element-citation></ref><ref id="B41"><label>3</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Paun</surname><given-names>G</given-names></name></person-group><source><italic>Membrane Computing. An Introduction</italic></source><year>2002</year><publisher-name>Springer</publisher-name></element-citation></ref><ref id="B14"><label>4</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Barbuti</surname><given-names>R</given-names></name><name><surname>Maggiolo-Schettini</surname><given-names>A</given-names></name><name><surname>Milazzo</surname><given-names>P</given-names></name><name><surname>Troina</surname><given-names>A</given-names></name></person-group><article-title>A calculus of looping sequences for modelling microbiological systems</article-title><source><italic>Fundamenta Informaticae</italic></source><year>2006</year><volume>72</volume><issue>1-3</issue><fpage>21</fpage><lpage>35</lpage><pub-id pub-id-type="other">2-s2.0-33747069635</pub-id></element-citation></ref><ref id="B13"><label>5</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Barbuti</surname><given-names>R</given-names></name><name><surname>Maggiolo-Schettini</surname><given-names>A</given-names></name><name><surname>Milazzo</surname><given-names>P</given-names></name><name><surname>Tiberi</surname><given-names>P</given-names></name><name><surname>Troina</surname><given-names>A</given-names></name></person-group><article-title>Stochastic calculus of looping sequences for the modelling and simulation of cellular pathways</article-title><source><italic>Transactions on Computational Systems Biology</italic></source><year>2009</year><volume>5121</volume><fpage>86</fpage><lpage>113</lpage><pub-id pub-id-type="other">2-s2.0-67650330232</pub-id></element-citation></ref><ref id="B38"><label>6</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Krivine</surname><given-names>J</given-names></name><name><surname>Milner</surname><given-names>R</given-names></name><name><surname>Troina</surname><given-names>A</given-names></name></person-group><article-title>Stochastic Bigraphs</article-title><source><italic>Electronic Notes in Theoretical Computer Science</italic></source><year>2008</year><volume>218</volume><issue>C</issue><fpage>73</fpage><lpage>96</lpage><pub-id pub-id-type="other">2-s2.0-54049131291</pub-id></element-citation></ref><ref id="B18"><label>7</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cardelli</surname><given-names>L</given-names></name></person-group><article-title>On process rate semantics</article-title><source><italic>Theoretical Computer Science</italic></source><year>2008</year><volume>391</volume><issue>3</issue><fpage>190</fpage><lpage>215</lpage><pub-id pub-id-type="other">2-s2.0-38649092709</pub-id></element-citation></ref><ref id="B28"><label>8</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Ferscha</surname><given-names>A</given-names></name></person-group><article-title>Performance models for discrete event systems with synchronisations: formalisms and analysis techniques</article-title><source><italic>VII-Simulation</italic></source><year>1998</year><volume>2</volume><publisher-loc>Zaragoza, Spain</publisher-loc><publisher-name>Editorial Kronos</publisher-name><series>MATCH Advanced Schools</series></element-citation></ref><ref id="B40"><label>9</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Meng</surname><given-names>TC</given-names></name><name><surname>Somani</surname><given-names>S</given-names></name><name><surname>Dhar</surname><given-names>P</given-names></name></person-group><article-title>Modeling and simulation of biological systems with stochasticity</article-title><source><italic>In Silico Biology</italic></source><year>2004</year><volume>4</volume><issue>3</issue><fpage>293</fpage><lpage>309</lpage><pub-id pub-id-type="other">2-s2.0-10044260032</pub-id><pub-id pub-id-type="pmid">15724281</pub-id></element-citation></ref><ref id="B24"><label>10</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Coppo</surname><given-names>M</given-names></name><name><surname>Damiani</surname><given-names>F</given-names></name><name><surname>Drocco</surname><given-names>M</given-names></name><etal/></person-group><article-title>Simulation techniques for the calculus of wrapped compartments</article-title><source><italic>Theoretical Computer Science</italic></source><year>2012</year><volume>431</volume><fpage>75</fpage><lpage>95</lpage><pub-id pub-id-type="other">2-s2.0-84859530720</pub-id></element-citation></ref><ref id="B3"><label>11</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Aldinucci</surname><given-names>M</given-names></name><name><surname>Bracciali</surname><given-names>A</given-names></name><name><surname>Li&#x000f2;</surname><given-names>P</given-names></name><name><surname>Sorathiya</surname><given-names>A</given-names></name><name><surname>Torquati</surname><given-names>M</given-names></name></person-group><article-title>StochKit-FF: efficient systems biology on multicore architectures</article-title><source><italic>Euro-Par 2010 Parallel Processing Workshops</italic></source><year>2011</year><volume>6586</volume><publisher-loc>Ischia, Italy</publisher-loc><publisher-name>Springer</publisher-name><fpage>167</fpage><lpage>175</lpage><series>Lecture Notes in Computer Science</series><pub-id pub-id-type="other">2-s2.0-80051706079</pub-id></element-citation></ref><ref id="B4"><label>12</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Aldinucci</surname><given-names>M</given-names></name><name><surname>Coppo</surname><given-names>M</given-names></name><name><surname>Damiani</surname><given-names>F</given-names></name><name><surname>Drocco</surname><given-names>M</given-names></name><name><surname>Torquati</surname><given-names>M</given-names></name><name><surname>Troina</surname><given-names>A</given-names></name></person-group><article-title>On designing multicore-aware simulators for biological systems</article-title><conf-name>Proceedings of the 19th International Euromicro Conference on Parallel, Distributed, and Network-Based Processing (PDP '11)</conf-name><conf-date>February 2011</conf-date><conf-loc>Ayia Napa, Cyprus</conf-loc><fpage>318</fpage><lpage>325</lpage><pub-id pub-id-type="other">2-s2.0-79955038621</pub-id></element-citation></ref><ref id="B47"><label>13</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Salis</surname><given-names>H</given-names></name><name><surname>Sotiropoulos</surname><given-names>V</given-names></name><name><surname>Kaznessis</surname><given-names>YN</given-names></name></person-group><article-title>Multiscale Hy3S: Hybrid stochastic simulation for supercomputers</article-title><source><italic>BMC Bioinformatics</italic></source><year>2006</year><volume>7, article 93</volume><pub-id pub-id-type="other">2-s2.0-33645465102</pub-id></element-citation></ref><ref id="B36"><label>14</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Intosalmi</surname><given-names>J</given-names></name><name><surname>Manninen</surname><given-names>T</given-names></name><name><surname>Ruohonen</surname><given-names>K</given-names></name><name><surname>Linne</surname><given-names>M-L</given-names></name></person-group><article-title>Computational study of noise in a large signal transduction network</article-title><source><italic>BMC Bioinformatics</italic></source><year>2011</year><volume>12, article 252</volume><pub-id pub-id-type="other">2-s2.0-79959247643</pub-id></element-citation></ref><ref id="B26"><label>15</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Dematt&#x000e9;</surname><given-names>L</given-names></name><name><surname>Mazza</surname><given-names>T</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Heiner</surname><given-names>M</given-names></name><name><surname>Uhrmacher</surname><given-names>AM</given-names></name></person-group><article-title>On parallel stochastic simulation of diffusive systems</article-title><source><italic>Computational Methods in Systems Biology</italic></source><year>2008</year><volume>5307</volume><publisher-name>Springer</publisher-name><fpage>191</fpage><lpage>210</lpage><series>Lecture Notes in Computer Science</series><pub-id pub-id-type="other">2-s2.0-57049085764</pub-id></element-citation></ref><ref id="B12"><label>16</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Ballarini</surname><given-names>P</given-names></name><name><surname>Forlin</surname><given-names>M</given-names></name><name><surname>Mazza</surname><given-names>T</given-names></name><name><surname>Prandi</surname><given-names>D</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Brim</surname><given-names>L</given-names></name><name><surname>van de Pol</surname><given-names>J</given-names></name></person-group><article-title>Efficient parallel statistical model checking of biochemical networks</article-title><volume>14</volume><conf-name>Proceedings of the 8th International Workshop on Parallel and Distributed Methods in Verification (PDMC '09)</conf-name><conf-date>2009</conf-date><conf-loc>Eindhoven, The Netherlands</conf-loc><fpage>47</fpage><lpage>61</lpage><series>Electronic Proceedings in Theoretical Computer Science</series></element-citation></ref><ref id="B23"><label>17</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Cole</surname><given-names>M</given-names></name></person-group><source><italic>Algorithmic Skeletons: Structured Management of Parallel Computations</italic></source><year>1989</year><publisher-name>Pitman</publisher-name><series>Research Monographs in Parallel and Distributed Computing</series></element-citation></ref><ref id="B25"><label>18</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dean</surname><given-names>J</given-names></name><name><surname>Ghemawat</surname><given-names>S</given-names></name></person-group><article-title>MapReduce: Simplified data processing on large clusters</article-title><source><italic>Communications of the ACM</italic></source><year>2008</year><volume>51</volume><issue>1</issue><fpage>107</fpage><lpage>113</lpage><pub-id pub-id-type="other">2-s2.0-37549003336</pub-id></element-citation></ref><ref id="B35"><label>19</label><element-citation publication-type="book"><collab>Intel Corp</collab><source><italic>Threading Building Blocks</italic></source><year>2011</year></element-citation></ref><ref id="B11"><label>20</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Asanovic</surname><given-names>K</given-names></name><name><surname>Bodik</surname><given-names>R</given-names></name><name><surname>Demmel</surname><given-names>J</given-names></name><etal/></person-group><article-title>A view of the parallel computing landscape</article-title><source><italic>Communications of the ACM</italic></source><year>2009</year><volume>52</volume><issue>10</issue><fpage>56</fpage><lpage>67</lpage><pub-id pub-id-type="other">2-s2.0-70349694201</pub-id></element-citation></ref><ref id="B6"><label>21</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Aldinucci</surname><given-names>M</given-names></name><name><surname>Danelutto</surname><given-names>M</given-names></name></person-group><article-title>Skeleton-based parallel programming: functional and parallel semantics in a single shot</article-title><source><italic>Computer Languages, Systems and Structures</italic></source><year>2007</year><volume>33</volume><issue>3-4</issue><fpage>179</fpage><lpage>192</lpage><pub-id pub-id-type="other">2-s2.0-33847650963</pub-id></element-citation></ref><ref id="B7"><label>22</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Aldinucci</surname><given-names>M</given-names></name><name><surname>Danelutto</surname><given-names>M</given-names></name><name><surname>Kilpatrick</surname><given-names>P</given-names></name><name><surname>Meneghin</surname><given-names>M</given-names></name><name><surname>Torquati</surname><given-names>M</given-names></name></person-group><article-title>An efficient unbounded lock-free queue for multi-core systems</article-title><source><italic>Programming Multi-Core and Many-Core Computing Systems, Parallel and Distributed Computing</italic></source><year>2012</year><volume>7484</volume><issue>chapter 13</issue><publisher-name>Wiley</publisher-name><fpage>662</fpage><lpage>673</lpage><series>Lecture Notes in Computer Science</series><pub-id pub-id-type="other">2-s2.0-84867629962</pub-id></element-citation></ref><ref id="B1"><label>23</label><element-citation publication-type="other"><collab>FastFlow</collab><comment>2009, <ext-link ext-link-type="uri" xlink:href="http://mc-fastflow.sourceforge.net/">http://mc-fastflow.sourceforge.net/</ext-link></comment></element-citation></ref><ref id="B8"><label>24</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Aldinucci</surname><given-names>M</given-names></name><name><surname>Meneghin</surname><given-names>M</given-names></name><name><surname>Torquati</surname><given-names>M</given-names></name></person-group><article-title>Efficient Smith-Waterman on multi-core with FastFlow</article-title><conf-name>Proceedings of the 18th Euromicro Conference on Parallel, Distributed and Network-Based Processing (PDP '10)</conf-name><conf-date>February 2010</conf-date><conf-loc>Pisa, Italy</conf-loc><fpage>195</fpage><lpage>199</lpage><pub-id pub-id-type="other">2-s2.0-77952644291</pub-id></element-citation></ref><ref id="B31"><label>25</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hartigan</surname><given-names>JA</given-names></name><name><surname>Wong</surname><given-names>MA</given-names></name></person-group><article-title>A k-means clustering algorithm</article-title><source><italic>Journal of the Royal Statistical Society C</italic></source><year>1979</year><volume>28</volume><issue>1</issue><fpage>100</fpage><lpage>108</lpage></element-citation></ref><ref id="B33"><label>26</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Heyer</surname><given-names>LJ</given-names></name><name><surname>Kruglyak</surname><given-names>S</given-names></name><name><surname>Yooseph</surname><given-names>S</given-names></name></person-group><article-title>Exploring expression data identification and analysis of coexpressed genes</article-title><source><italic>Genome Research</italic></source><year>1999</year><volume>9</volume><issue>11</issue><fpage>1106</fpage><lpage>1115</lpage><pub-id pub-id-type="other">2-s2.0-0032729435</pub-id><pub-id pub-id-type="pmid">10568750</pub-id></element-citation></ref><ref id="B48"><label>27</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Savitzky</surname><given-names>A</given-names></name><name><surname>Golay</surname><given-names>MJE</given-names></name></person-group><article-title>Smoothing and differentiation of data by simplified least squares procedures</article-title><source><italic>Analytical Chemistry</italic></source><year>1964</year><volume>36</volume><issue>8</issue><fpage>1627</fpage><lpage>1639</lpage><pub-id pub-id-type="other">2-s2.0-0042553279</pub-id></element-citation></ref><ref id="B49"><label>28</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schl&#x000f6;gl</surname><given-names>F</given-names></name></person-group><article-title>Chemical reaction models for non-equilibrium phase transitions</article-title><source><italic>Zeitschrift f&#x000fc;r Physik</italic></source><year>1972</year><volume>253</volume><issue>2</issue><fpage>147</fpage><lpage>161</lpage><pub-id pub-id-type="other">2-s2.0-34250450481</pub-id></element-citation></ref><ref id="B10"><label>29</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Arkin</surname><given-names>A</given-names></name><name><surname>Ross</surname><given-names>J</given-names></name><name><surname>McAdams</surname><given-names>HH</given-names></name></person-group><article-title>Stochastic kinetic analysis of developmental pathway bifurcation in phage <italic>&#x003bb;</italic>-infected Escherichia coli cells</article-title><source><italic>Genetics</italic></source><year>1998</year><volume>149</volume><issue>4</issue><fpage>1633</fpage><lpage>1648</lpage><pub-id pub-id-type="other">2-s2.0-0031879114</pub-id><pub-id pub-id-type="pmid">9691025</pub-id></element-citation></ref><ref id="B32"><label>30</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hasty</surname><given-names>J</given-names></name><name><surname>Pradines</surname><given-names>J</given-names></name><name><surname>Dolnik</surname><given-names>M</given-names></name><name><surname>Collins</surname><given-names>JJ</given-names></name></person-group><article-title>Noise-based switches and amplifiers for gene expression</article-title><source><italic>Proceedings of the National Academy of Sciences of the United States of America</italic></source><year>2000</year><volume>97</volume><issue>5</issue><fpage>2075</fpage><lpage>2080</lpage><pub-id pub-id-type="other">2-s2.0-0034050722</pub-id><pub-id pub-id-type="pmid">10681449</pub-id></element-citation></ref><ref id="B39"><label>31</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Leloup</surname><given-names>J-C</given-names></name><name><surname>Gonze</surname><given-names>D</given-names></name><name><surname>Goldbeter</surname><given-names>A</given-names></name></person-group><article-title>Limit cycle models for circadian rhythms based on transcriptional regulation in Drosophila and Neurospora</article-title><source><italic>Journal of Biological Rhythms</italic></source><year>1999</year><volume>14</volume><issue>6</issue><fpage>433</fpage><lpage>448</lpage><pub-id pub-id-type="other">2-s2.0-0033375755</pub-id><pub-id pub-id-type="pmid">10643740</pub-id></element-citation></ref><ref id="B5"><label>32</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Aldinucci</surname><given-names>M</given-names></name><name><surname>Danelutto</surname><given-names>M</given-names></name></person-group><article-title>Stream parallel skeleton optimization</article-title><conf-name>Proceedings of the International Euromicro Conference on Parallel and Distributed Computing and Systems (PDCS '99)</conf-name><conf-date>November 1999</conf-date><conf-loc>Cambridge, Mass, USA</conf-loc><publisher-name>IASTED, ACTA press</publisher-name><fpage>955</fpage><lpage>962</lpage></element-citation></ref><ref id="B43"><label>33</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Phillips</surname><given-names>A</given-names></name><name><surname>Cardelli</surname><given-names>L</given-names></name></person-group><article-title>A correct abstract machine for the stochastic pi-calculus</article-title><conf-name>Concurrent Models in Molecular Biology (BIOCONCUR '04)</conf-name><conf-date>2004</conf-date><conf-loc>London, UK</conf-loc><publisher-name>Elsevier</publisher-name><series>Electronic Notes in Theoretical Computer Science</series></element-citation></ref><ref id="B44"><label>34</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Phillips</surname><given-names>A</given-names></name><name><surname>Cardelli</surname><given-names>L</given-names></name></person-group><article-title>Efficient, correct simulation of biological processes in the stochastic Pi-calculus</article-title><volume>4695</volume><conf-name>Proceedings of theInternational Conference on Computational Methods in Systems Biology (CMSB '07)</conf-name><conf-date>2007</conf-date><publisher-name>Springer</publisher-name><fpage>184</fpage><lpage>199</lpage><series>Lecture Notes in Computer Science</series><pub-id pub-id-type="other">2-s2.0-38049132336</pub-id></element-citation></ref><ref id="B45"><label>35</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ramsey</surname><given-names>S</given-names></name><name><surname>Orrell</surname><given-names>D</given-names></name><name><surname>Bolouri</surname><given-names>H</given-names></name></person-group><article-title>Dizzy: stochastic simulation of large-scale genetic regulatory networks (supplementary material)</article-title><source><italic>Journal of Bioinformatics and Computational Biology</italic></source><year>2005</year><volume>3</volume><issue>2</issue><fpage>437</fpage><lpage>454</lpage><pub-id pub-id-type="other">2-s2.0-17644372713</pub-id><pub-id pub-id-type="pmid">15852514</pub-id></element-citation></ref><ref id="B22"><label>36</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ciocchetta</surname><given-names>F</given-names></name><name><surname>Hillston</surname><given-names>J</given-names></name></person-group><article-title>Bio-PEPA: an extension of the process algebra PEPA for biochemical networks</article-title><source><italic>Electronic Notes in Theoretical Computer Science</italic></source><year>2008</year><volume>194</volume><issue>3</issue><fpage>103</fpage><lpage>117</lpage><comment>Proceedings of the First Workshop &#x0201c;From Biology to Concurrency and back (FBTC 2007)&#x0201d;</comment><pub-id pub-id-type="other">2-s2.0-38649133815</pub-id></element-citation></ref><ref id="B21"><label>37</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Ciocchetta</surname><given-names>F</given-names></name><name><surname>Duguid</surname><given-names>A</given-names></name><name><surname>Gilmore</surname><given-names>S</given-names></name><name><surname>Guerriero</surname><given-names>ML</given-names></name><name><surname>Hillston</surname><given-names>J</given-names></name></person-group><article-title>The Bio-PEPA tool suite</article-title><conf-name>Proceedings of the 6th International Conference on the Quantitative Evaluation of Systems (QEST '09)</conf-name><conf-date>September 2009</conf-date><conf-loc>Budapest, Hungary</conf-loc><fpage>309</fpage><lpage>310</lpage><pub-id pub-id-type="other">2-s2.0-74049092326</pub-id></element-citation></ref><ref id="B46"><label>38</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ray</surname><given-names>T</given-names></name><name><surname>Saini</surname><given-names>P</given-names></name></person-group><article-title>Engineering design optimization using a swarm with an intelligent information sharing among individuals</article-title><source><italic>Engineering Optimization</italic></source><year>2001</year><volume>33</volume><issue>6</issue><fpage>735</fpage><lpage>748</lpage><pub-id pub-id-type="other">2-s2.0-0012622436</pub-id></element-citation></ref><ref id="B27"><label>39</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dhar</surname><given-names>PK</given-names></name><name><surname>Meng</surname><given-names>TC</given-names></name><name><surname>Somani</surname><given-names>S</given-names></name><etal/></person-group><article-title>Grid Cellware: the first grid-enabled tool for modelling and simulating cellular processes</article-title><source><italic>Bioinformatics</italic></source><year>2005</year><volume>21</volume><issue>7</issue><fpage>1284</fpage><lpage>1287</lpage><pub-id pub-id-type="other">2-s2.0-20144389891</pub-id><pub-id pub-id-type="pmid">15546936</pub-id></element-citation></ref><ref id="B15"><label>40</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Barnat</surname><given-names>J</given-names></name><name><surname>Brim</surname><given-names>L</given-names></name><name><surname>&#x00160;afr&#x000e1;nek</surname><given-names>D</given-names></name></person-group><article-title>High-performance analysis of biological systems dynamics with the DiVinE model checker</article-title><source><italic>Briefings in Bioinformatics</italic></source><year>2010</year><volume>11</volume><issue>3</issue><fpage>301</fpage><lpage>312</lpage><pub-id pub-id-type="other">2-s2.0-77953876554</pub-id><pub-id pub-id-type="pmid">20478855</pub-id></element-citation></ref><ref id="B42"><label>41</label><element-citation publication-type="other"><person-group person-group-type="author"><name><surname>Petzold</surname><given-names>LR</given-names></name></person-group><article-title>StochKit: stochastic simulation kit web page</article-title><comment>2009, <ext-link ext-link-type="uri" xlink:href="http://www.engineering.ucsb.edu/~cse/StochKit/index.html">http://www.engineering.ucsb.edu/~cse/StochKit/index.html</ext-link></comment></element-citation></ref><ref id="B30"><label>42</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gruenert</surname><given-names>G</given-names></name><name><surname>Ibrahim</surname><given-names>B</given-names></name><name><surname>Lenser</surname><given-names>T</given-names></name><name><surname>Lohel</surname><given-names>M</given-names></name><name><surname>Hinze</surname><given-names>T</given-names></name><name><surname>Dittrich</surname><given-names>P</given-names></name></person-group><article-title>Rule-based spatial modeling with diffusing, geometrically constrained molecules</article-title><source><italic>BMC Bioinformatics</italic></source><year>2010</year><volume>11, article 307</volume><pub-id pub-id-type="other">2-s2.0-77953064219</pub-id></element-citation></ref><ref id="B34"><label>43</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>H</given-names></name><name><surname>Petzold</surname><given-names>L</given-names></name></person-group><article-title>Efficient parallelization of the stochastic simulation algorithm for chemically reacting systems on the graphics processing unit</article-title><source><italic>International Journal of High Performance Computing Applications</italic></source><year>2010</year><volume>24</volume><issue>2</issue><fpage>107</fpage><lpage>116</lpage><pub-id pub-id-type="other">2-s2.0-77951217960</pub-id></element-citation></ref><ref id="B37"><label>44</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Klingbeil</surname><given-names>G</given-names></name><name><surname>Erban</surname><given-names>R</given-names></name><name><surname>Giles</surname><given-names>M</given-names></name><name><surname>Maini</surname><given-names>PK</given-names></name></person-group><article-title>STOCHSIMGPU: parallel stochastic simulation for the systems biology toolbox 2 for MATLAB</article-title><source><italic>Bioinformatics</italic></source><year>2011</year><volume>27</volume><issue>8</issue><fpage>1170</fpage><lpage>1171</lpage><pub-id pub-id-type="other">2-s2.0-79954530734</pub-id><pub-id pub-id-type="pmid">21357575</pub-id></element-citation></ref><ref id="B19"><label>45</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Cardelli</surname><given-names>L</given-names></name><name><surname>Gardner</surname><given-names>P</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Ferreira</surname><given-names>F</given-names></name><name><surname>L&#x000f6;we</surname><given-names>B</given-names></name><name><surname>Mayordomo</surname><given-names>E</given-names></name><name><surname>Gomes</surname><given-names>LM</given-names></name></person-group><article-title>Processes in space</article-title><source><italic>Programs, Proofs, Processes</italic></source><year>2010</year><volume>6158</volume><publisher-name>Springer</publisher-name><fpage>78</fpage><lpage>87</lpage><series>Lecture Notes in Computer Science</series><pub-id pub-id-type="other">2-s2.0-77954869746</pub-id></element-citation></ref><ref id="B16"><label>46</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Bioglio</surname><given-names>L</given-names></name><name><surname>Calcagno</surname><given-names>C</given-names></name><name><surname>Coppo</surname><given-names>M</given-names></name><etal/></person-group><article-title>A spatial calculus of wrapped compartments</article-title><conf-name>Proceedings of the 5th Workshop on Membrane Computing and Biologically Inspired Process Calculi (MeCBIC '11)</conf-name><conf-date>2011</conf-date><conf-loc>Fontainebleau, France</conf-loc></element-citation></ref><ref id="B17"><label>47</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Calcagno</surname><given-names>C</given-names></name><name><surname>Coppo</surname><given-names>M</given-names></name><name><surname>Damiani</surname><given-names>F</given-names></name><etal/></person-group><article-title>Modelling spatial interactions in the arbuscular mycorrhizal symbiosis using the calculus of wrapped compartments</article-title><volume>67</volume><conf-name>Proceedings of the 3rd International Workshop on Computational Models for Cell Processes (CompMod '11)</conf-name><conf-date>2011</conf-date><conf-loc>Aachen, Germany</conf-loc><fpage>3</fpage><lpage>18</lpage><series>Electronic Proceedings in Theoretical Computer Science</series></element-citation></ref><ref id="B20"><label>48</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>D</given-names></name><name><surname>Wang</surname><given-names>L</given-names></name><name><surname>Cui</surname><given-names>D</given-names></name><etal/></person-group><article-title>A massively parallel approach for nonlinear interdependency analysis of multivariate signals with GPGPU</article-title><conf-name>Proceedings of the 26th IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW '12)</conf-name><conf-date>May 2012</conf-date><fpage>1971</fpage><lpage>1978</lpage><pub-id pub-id-type="other">2-s2.0-84867432229</pub-id></element-citation></ref><ref id="B2"><label>49</label><element-citation publication-type="other"><collab>CWC Simulator project</collab><comment>2010, <ext-link ext-link-type="uri" xlink:href="http://sourceforge.net/projects/cwcsimulator/">http://sourceforge.net/projects/cwcsimulator/</ext-link></comment></element-citation></ref></ref-list></back><floats-group><fig id="fig1" orientation="portrait" position="float"><label>Figure 1</label><caption><p>CWC simulator with online parallel analysis: architecture.</p></caption><graphic xlink:href="BMRI2014-207041.001"/></fig><fig id="fig2" orientation="portrait" position="float"><label>Figure 2</label><caption><p>Screenshots of the simulation tool interface.</p></caption><graphic xlink:href="BMRI2014-207041.002"/></fig><fig id="fig3" orientation="portrait" position="float"><label>Figure 3</label><caption><p>Simulation results on the Schl&#x000f6;gl model. The figures report the mean and standard deviation, two exemplificative raw simulation trajectories, and the clustering results using<italic> K</italic>-means during the simulation runs (a) and at the end of the simulation runs (b).</p></caption><graphic xlink:href="BMRI2014-207041.003"/></fig><fig id="fig4" orientation="portrait" position="float"><label>Figure 4</label><caption><p>Simulation results on the <italic>&#x003bb;</italic>-phage model. (a) Reports (approximatively) the 480 raw trajectories and (b) shows the online clustering results using QT.</p></caption><graphic xlink:href="BMRI2014-207041.004"/></fig><fig id="fig5" orientation="portrait" position="float"><label>Figure 5</label><caption><p>Simulation results of the cytosolic FRQ protein of the<italic> Neurospora</italic> model.</p></caption><graphic xlink:href="BMRI2014-207041.005"/></fig><fig id="fig6" orientation="portrait" position="float"><label>Figure 6</label><caption><p>Speedup of the workflow of the Neurospora model on the Intel platform against number of simulation engines with 3 statistical engines, for different number of trajectories, each of them counting 10<sup>4</sup> points (a) and 10<sup>5</sup> points (b).</p></caption><graphic xlink:href="BMRI2014-207041.006"/></fig><table-wrap id="tab1" orientation="portrait" position="float"><label>Table 1</label><caption><p>Performance on 1200 simulation instances of the Neurospora model (Intel 32 core platform).</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="center" colspan="2" rowspan="1">Single trajectory information</th><th align="center" colspan="2" rowspan="1">
Overall data<break/>(20 sim eng, 3 stat eng)</th></tr><tr><th align="left" rowspan="1" colspan="1">Number of samples</th><th align="center" rowspan="1" colspan="1">Interarrival time</th><th align="center" rowspan="1" colspan="1">Throughput</th><th align="center" rowspan="1" colspan="1">Output size</th></tr></thead><tbody><tr><td align="left" rowspan="1" colspan="1">10<sup>4</sup>
</td><td align="center" rowspan="1" colspan="1">25.86&#x02009;<italic>&#x003bc;</italic>s</td><td align="center" rowspan="1" colspan="1">2.70&#x02009;MB/s</td><td align="center" rowspan="1" colspan="1">82.40&#x02009;MB</td></tr><tr><td align="left" rowspan="1" colspan="1">10<sup>5</sup>
</td><td align="center" rowspan="1" colspan="1">2.78&#x02009;<italic>&#x003bc;</italic>s</td><td align="center" rowspan="1" colspan="1">28.59&#x02009;MB/s</td><td align="center" rowspan="1" colspan="1">823.98&#x02009;MB</td></tr><tr><td align="left" rowspan="1" colspan="1">10<sup>6</sup>
</td><td align="center" rowspan="1" colspan="1">232.68&#x02009;ns</td><td align="center" rowspan="1" colspan="1">303.86&#x02009;MB/s</td><td align="center" rowspan="1" colspan="1">8.24&#x02009;GB</td></tr></tbody></table></table-wrap><table-wrap id="tab2" orientation="portrait" position="float"><label>Table 2</label><caption><p>Biological simulation tools comparison.</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="1" colspan="1"> Tool </th><th align="center" rowspan="1" colspan="1"> Calculus </th><th align="center" rowspan="1" colspan="1"> Simulation schema </th><th align="center" rowspan="1" colspan="1"> Parallelism </th><th align="center" rowspan="1" colspan="1"> Data analysis</th></tr></thead><tbody><tr><td align="left" rowspan="1" colspan="1">SCWC </td><td align="center" rowspan="1" colspan="1"> CWC </td><td align="center" rowspan="1" colspan="1"> Gillespie </td><td align="center" rowspan="1" colspan="1"> FastFlow </td><td align="center" rowspan="1" colspan="1"> Online statistics </td></tr><tr><td align="left" rowspan="1" colspan="1">SPiM </td><td align="center" rowspan="1" colspan="1">
<italic>&#x003c0;</italic>-calculus </td><td align="center" rowspan="1" colspan="1"> Gillespie </td><td align="center" rowspan="1" colspan="1"> None </td><td align="center" rowspan="1" colspan="1"> None </td></tr><tr><td align="left" rowspan="1" colspan="1">Dizzy </td><td align="center" rowspan="1" colspan="1"> Reaction model </td><td align="center" rowspan="1" colspan="1"> Gillespie, Gibson-Bruck, Tau-Leap, ODE </td><td align="center" rowspan="1" colspan="1"> None </td><td align="center" rowspan="1" colspan="1"> None </td></tr><tr><td align="left" rowspan="1" colspan="1">BioPEPA </td><td align="center" rowspan="1" colspan="1"> Process algebra </td><td align="center" rowspan="1" colspan="1"> ODE, Gillespie </td><td align="center" rowspan="1" colspan="1"> None </td><td align="center" rowspan="1" colspan="1"> None </td></tr><tr><td align="left" rowspan="1" colspan="1">Cellware </td><td align="center" rowspan="1" colspan="1"> Reaction model </td><td align="center" rowspan="1" colspan="1"> Gillespie, Gibson-Bruck, ODE </td><td align="center" rowspan="1" colspan="1"> None </td><td align="center" rowspan="1" colspan="1"> None </td></tr><tr><td align="left" rowspan="1" colspan="1">DiVinE </td><td align="center" rowspan="1" colspan="1"> Model checker </td><td align="center" rowspan="1" colspan="1"> ODE </td><td align="center" rowspan="1" colspan="1"> MPI </td><td align="center" rowspan="1" colspan="1"> None </td></tr><tr><td align="left" rowspan="1" colspan="1">StochKit </td><td align="center" rowspan="1" colspan="1"> Reaction model </td><td align="center" rowspan="1" colspan="1"> Gillespie, Tau-leaping </td><td align="center" rowspan="1" colspan="1"> MPI </td><td align="center" rowspan="1" colspan="1"> Postprocessing</td></tr><tr><td align="left" rowspan="1" colspan="1">StochKit2 </td><td align="center" rowspan="1" colspan="1"> Reaction model </td><td align="center" rowspan="1" colspan="1"> Gillespie, Tau-leaping </td><td align="center" rowspan="1" colspan="1"> Multithread </td><td align="center" rowspan="1" colspan="1"> Postprocessing</td></tr><tr><td align="left" rowspan="1" colspan="1">StochKit-FF </td><td align="center" rowspan="1" colspan="1"> Reaction model </td><td align="center" rowspan="1" colspan="1"> Gillespie, Tau-leaping </td><td align="center" rowspan="1" colspan="1"> FastFlow </td><td align="center" rowspan="1" colspan="1"> Online statistics</td></tr><tr><td align="left" rowspan="1" colspan="1">Hy3S </td><td align="center" rowspan="1" colspan="1"> Reaction model </td><td align="center" rowspan="1" colspan="1"> Gibson-Bruck, Hybrid </td><td align="center" rowspan="1" colspan="1"> MPI </td><td align="center" rowspan="1" colspan="1"> Postprocessing</td></tr><tr><td align="left" rowspan="1" colspan="1">Li and Petzold's </td><td align="center" rowspan="1" colspan="1"> Reaction model </td><td align="center" rowspan="1" colspan="1"> Gillespie </td><td align="center" rowspan="1" colspan="1"> GPGPU </td><td align="center" rowspan="1" colspan="1"> None</td></tr><tr><td align="left" rowspan="1" colspan="1">StochSimGPU </td><td align="center" rowspan="1" colspan="1"> Reaction model </td><td align="center" rowspan="1" colspan="1"> Gillespie, Gibson-Bruck, Li </td><td align="center" rowspan="1" colspan="1"> GPGPU </td><td align="center" rowspan="1" colspan="1"> Postprocessing</td></tr></tbody></table></table-wrap></floats-group></article>